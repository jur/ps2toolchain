diff -Nurp binutils-cvs-20130526/config.sub binutils-cvs-20130526-mips64r5900el-linux-patched/config.sub
--- binutils-cvs-20130526/config.sub	2013-04-29 17:13:53.000000000 +0200
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/config.sub	2013-05-26 12:10:25.620407001 +0200
@@ -276,6 +276,7 @@ case $basic_machine in
 	| mips64orion | mips64orionel \
 	| mips64r5900 | mips64r5900el \
 	| mips64vr | mips64vrel \
+	| mipsr5900 | mipsr5900el \
 	| mips64vr4100 | mips64vr4100el \
 	| mips64vr4300 | mips64vr4300el \
 	| mips64vr5000 | mips64vr5000el \
diff -Nurp binutils-cvs-20130526/gas/config/tc-mips.c binutils-cvs-20130526-mips64r5900el-linux-patched/gas/config/tc-mips.c
--- binutils-cvs-20130526/gas/config/tc-mips.c	2013-05-22 20:08:25.000000000 +0200
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/gas/config/tc-mips.c	2013-05-26 12:10:25.624407001 +0200
@@ -289,6 +289,9 @@ static int file_mips_soft_float = 0;
 /* 1 if -msingle-float, 0 if -mdouble-float.  The default is 0.   */
 static int file_mips_single_float = 0;
 
+/* True if -mr5900-legacy-vu0 was passed.  */
+static int file_mips_legacy_vu0 = 0;
+
 static struct mips_set_options mips_opts =
 {
   /* isa */ ISA_UNKNOWN, /* ase_mips3d */ -1, /* ase_mdmx */ -1,
@@ -1896,7 +1899,7 @@ struct regname {
   unsigned int num;
 };
 
-#define RTYPE_MASK	0x1ff00
+#define RTYPE_MASK	0x7ff00
 #define RTYPE_NUM	0x00100
 #define RTYPE_FPU	0x00200
 #define RTYPE_FCC	0x00400
@@ -1906,6 +1909,8 @@ struct regname {
 #define RTYPE_PC	0x04000
 #define RTYPE_ACC	0x08000
 #define RTYPE_CCC	0x10000
+#define RTYPE_VI	0x20000
+#define RTYPE_VF	0x40000
 #define RNUM_MASK	0x000ff
 #define RWARN		0x80000
 
@@ -2093,6 +2098,74 @@ struct regname {
     {"$v30",	RTYPE_VEC | 30}, \
     {"$v31",	RTYPE_VEC | 31}
 
+#define R5900_VU0_VF_NAMES \
+    {"$vf0",	RTYPE_VF | 0},  \
+    {"$vf1",	RTYPE_VF | 1},  \
+    {"$vf2",	RTYPE_VF | 2},  \
+    {"$vf3",	RTYPE_VF | 3},  \
+    {"$vf4",	RTYPE_VF | 4},  \
+    {"$vf5",	RTYPE_VF | 5},  \
+    {"$vf6",	RTYPE_VF | 6},  \
+    {"$vf7",	RTYPE_VF | 7},  \
+    {"$vf8",	RTYPE_VF | 8},  \
+    {"$vf9",	RTYPE_VF | 9},  \
+    {"$vf10",	RTYPE_VF | 10}, \
+    {"$vf11",	RTYPE_VF | 11}, \
+    {"$vf12",	RTYPE_VF | 12}, \
+    {"$vf13",	RTYPE_VF | 13}, \
+    {"$vf14",	RTYPE_VF | 14}, \
+    {"$vf15",	RTYPE_VF | 15}, \
+    {"$vf16",	RTYPE_VF | 16}, \
+    {"$vf17",	RTYPE_VF | 17}, \
+    {"$vf18",	RTYPE_VF | 18}, \
+    {"$vf19",	RTYPE_VF | 19}, \
+    {"$vf20",	RTYPE_VF | 20}, \
+    {"$vf21",	RTYPE_VF | 21}, \
+    {"$vf22",	RTYPE_VF | 22}, \
+    {"$vf23",	RTYPE_VF | 23}, \
+    {"$vf24",	RTYPE_VF | 24}, \
+    {"$vf25",	RTYPE_VF | 25}, \
+    {"$vf26",	RTYPE_VF | 26}, \
+    {"$vf27",	RTYPE_VF | 27}, \
+    {"$vf28",	RTYPE_VF | 28}, \
+    {"$vf29",	RTYPE_VF | 29}, \
+    {"$vf30",	RTYPE_VF | 30}, \
+    {"$vf31",	RTYPE_VF | 31}
+
+#define R5900_VU0_VI_NAMES \
+    {"$vi0",	RTYPE_VI | 0},  \
+    {"$vi1",	RTYPE_VI | 1},  \
+    {"$vi2",	RTYPE_VI | 2},  \
+    {"$vi3",	RTYPE_VI | 3},  \
+    {"$vi4",	RTYPE_VI | 4},  \
+    {"$vi5",	RTYPE_VI | 5},  \
+    {"$vi6",	RTYPE_VI | 6},  \
+    {"$vi7",	RTYPE_VI | 7},  \
+    {"$vi8",	RTYPE_VI | 8},  \
+    {"$vi9",	RTYPE_VI | 9},  \
+    {"$vi10",	RTYPE_VI | 10}, \
+    {"$vi11",	RTYPE_VI | 11}, \
+    {"$vi12",	RTYPE_VI | 12}, \
+    {"$vi13",	RTYPE_VI | 13}, \
+    {"$vi14",	RTYPE_VI | 14}, \
+    {"$vi15",	RTYPE_VI | 15}, \
+    {"$vi16",	RTYPE_VI | 16}, \
+    {"$vi17",	RTYPE_VI | 17}, \
+    {"$vi18",	RTYPE_VI | 18}, \
+    {"$vi19",	RTYPE_VI | 19}, \
+    {"$vi20",	RTYPE_VI | 20}, \
+    {"$vi21",	RTYPE_VI | 21}, \
+    {"$vi22",	RTYPE_VI | 22}, \
+    {"$vi23",	RTYPE_VI | 23}, \
+    {"$vi24",	RTYPE_VI | 24}, \
+    {"$vi25",	RTYPE_VI | 25}, \
+    {"$vi26",	RTYPE_VI | 26}, \
+    {"$vi27",	RTYPE_VI | 27}, \
+    {"$vi28",	RTYPE_VI | 28}, \
+    {"$vi29",	RTYPE_VI | 29}, \
+    {"$vi30",	RTYPE_VI | 30}, \
+    {"$vi31",	RTYPE_VI | 31}
+
 #define MIPS_DSP_ACCUMULATOR_NAMES \
     {"$ac0",	RTYPE_ACC | 0}, \
     {"$ac1",	RTYPE_ACC | 1}, \
@@ -2113,6 +2186,8 @@ static const struct regname reg_names[]
 
   MIPS16_SPECIAL_REGISTER_NAMES,
   MDMX_VECTOR_REGISTER_NAMES,
+  R5900_VU0_VF_NAMES,
+  R5900_VU0_VI_NAMES,
   MIPS_DSP_ACCUMULATOR_NAMES,
   {0, 0}
 };
@@ -2146,6 +2221,14 @@ reg_lookup (char **s, unsigned int types
   while (is_part_of_name (*e))
     ++e;
 
+  /* RTYPE_VF registers have optional appended suffixes
+     for R5900 VU instructions.  */
+  if (mips_opts.arch == CPU_R5900 && (types & RTYPE_VF))
+    {
+      while(!ISDIGIT(*(e-1)) && e != *s)
+	--e;
+    }
+
   /* Terminate name.  */
   save_c = *e;
   *e = '\0';
@@ -10437,10 +10520,18 @@ validate_mips_insn (const struct mips_op
       case '+':
     	switch (c = *p++)
 	  {
+	  case '-': break;
+	  case '+': break;
 	  case '1': USE_BITS (OP_MASK_UDI1,     OP_SH_UDI1); 	break;
 	  case '2': USE_BITS (OP_MASK_UDI2,	OP_SH_UDI2); 	break;
 	  case '3': USE_BITS (OP_MASK_UDI3,	OP_SH_UDI3); 	break;
 	  case '4': USE_BITS (OP_MASK_UDI4,	OP_SH_UDI4); 	break;
+	  case '5': USE_BITS (OP_MASK_FD,	OP_SH_FD);  break;
+	  case '6': USE_BITS (OP_MASK_FS,	OP_SH_FS);  break;
+	  case '7': USE_BITS (OP_MASK_FT,	OP_SH_FT);  break;
+	  case '8': USE_BITS (OP_MASK_FD,	OP_SH_FD);  break;
+	  case '9': USE_BITS (OP_MASK_FS,	OP_SH_FS);  break;
+	  case '0': USE_BITS (OP_MASK_FT,	OP_SH_FT);  break;
 	  case 'A': USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
 	  case 'B': USE_BITS (OP_MASK_INSMSB,	OP_SH_INSMSB);	break;
 	  case 'C': USE_BITS (OP_MASK_EXTMSBD,	OP_SH_EXTMSBD);	break;
@@ -10459,6 +10550,7 @@ validate_mips_insn (const struct mips_op
 	  case 'X': USE_BITS (OP_MASK_BBITIND,	OP_SH_BBITIND);	break;
 	  case 'p': USE_BITS (OP_MASK_CINSPOS,	OP_SH_CINSPOS);	break;
 	  case 'P': USE_BITS (OP_MASK_CINSPOS,	OP_SH_CINSPOS);	break;
+
 	  case 'Q': USE_BITS (OP_MASK_SEQI,	OP_SH_SEQI);	break;
 	  case 's': USE_BITS (OP_MASK_CINSLM1,	OP_SH_CINSLM1);	break;
 	  case 'S': USE_BITS (OP_MASK_CINSLM1,	OP_SH_CINSLM1);	break;
@@ -10467,6 +10559,18 @@ validate_mips_insn (const struct mips_op
 	  case 'a': USE_BITS (OP_MASK_OFFSET_A,	OP_SH_OFFSET_A); break;
 	  case 'b': USE_BITS (OP_MASK_OFFSET_B,	OP_SH_OFFSET_B); break;
 	  case 'c': USE_BITS (OP_MASK_OFFSET_C,	OP_SH_OFFSET_C); break;
+	  case 'd': USE_BITS (OP_MASK_VFTF,	OP_SH_VFTF);	break;
+	  case 'e': USE_BITS (OP_MASK_VFSF,	OP_SH_VFSF);	break;
+	  case 'f': USE_BITS (OP_MASK_VCALLMS,	OP_SH_VCALLMS);	break;
+	  case 'g': USE_BITS (OP_MASK_VIADDI,	OP_SH_VIADDI);	break;
+	  case 'h': break;
+	  case 'i': break;
+	  case 'j': USE_BITS (OP_MASK_VFIELD,	OP_SH_VFIELD);	break;
+	  case 'k': break;
+	  case 'l': break;
+	  case 'm': break;
+	  case 'q': break;
+	  case 'r': break;
 
 	  default:
 	    as_bad (_("internal: bad mips opcode (unknown extension operand type `+%c'): %s %s"),
@@ -10855,9 +10959,11 @@ mips_ip (char *str, struct mips_cl_insn
   offsetT min_range, max_range;
   long opend;
   char *name;
+  char *insn_suffix = NULL;
+  char tried_suffix = 0;
   int argnum;
   unsigned int rtype;
-  char *dot;
+  char *dot = NULL;
   long end;
 
   insn_error = NULL;
@@ -10888,26 +10994,57 @@ mips_ip (char *str, struct mips_cl_insn
     {
       insn = (struct mips_opcode *) hash_find (hash, name);
 
-      if (insn != NULL || !mips_opts.micromips)
-	break;
+      if (insn != NULL
+        || (!mips_opts.micromips && mips_opts.arch != CPU_R5900))
+        break;
       if (forced_insn_length)
-	break;
+        break;
+      if (tried_suffix)
+        {
+          if(dot)
+            *dot = '.';
+          tried_suffix = 0;
+          break;
+        }
 
+      /* Used for VU0 insn.xyz, insn.xyzw, or any other variation.
+         The suffix is needed for comparing with operand suffixes. */
+      if (mips_opts.arch == CPU_R5900)
+        {
+          dot = strrchr (name,'.');
+          opend = dot != NULL ? dot - name : end;
+          if (opend < 3)
+            break;
+          if (dot)
+          {
+            *dot = '\0';
+            dot++;
+            insn_suffix = alloca (strlen(dot)+1);
+            strncpy(insn_suffix,dot,strlen(dot));
+            insn_suffix[strlen(dot)] = '\0';
+            dot--;
+          }
+          tried_suffix = 1;
+        }
       /* See if there's an instruction size override suffix,
          either `16' or `32', at the end of the mnemonic proper,
          that defines the operation, i.e. before the first `.'
          character if any.  Strip it and retry.  */
-      dot = strchr (name, '.');
-      opend = dot != NULL ? dot - name : end;
-      if (opend < 3)
-	break;
-      if (name[opend - 2] == '1' && name[opend - 1] == '6')
-	forced_insn_length = 2;
-      else if (name[opend - 2] == '3' && name[opend - 1] == '2')
-	forced_insn_length = 4;
-      else
-	break;
-      memcpy (name + opend - 2, name + opend, end - opend + 1);
+      if (mips_opts.micromips)
+        {
+          dot = strchr (name, '.');
+          opend = dot != NULL ? dot - name : end;
+          if (opend < 3)
+            break;
+          if (name[opend - 2] == '1' && name[opend - 1] == '6')
+            forced_insn_length = 2;
+          else if (name[opend - 2] == '3' && name[opend - 1] == '2')
+            forced_insn_length = 4;
+          else
+            break;
+          memcpy (name + opend - 2, name + opend, end - opend + 1);
+        }
+
     }
   if (insn == NULL)
     {
@@ -11326,7 +11463,17 @@ mips_ip (char *str, struct mips_cl_insn
 			  || (mips_opts.micromips
 			      && args[1] == 'm'
 			      && (args[2] == 'l' || args[2] == 'n'
-				  || args[2] == 's' || args[2] == 'a')));
+				  || args[2] == 's' || args[2] == 'a'))
+			  || (mips_opts.arch == CPU_R5900
+			      && args[1] == '+' && args[2] == '9')
+			  || (mips_opts.arch == CPU_R5900
+			      && args[1] == '+' && args[2] == '-' 
+			      && args[3] == '+'
+			      && (args[4] == '0' || args[4] == '9'))
+			  || (mips_opts.arch == CPU_R5900
+			      && args[1] == '+'
+			      && (args[2] == '0' || args[2] == '9')
+			      && args[3] == '+' && args[4] == '+'));
 	      if (*s == '\0' && args[1] == 'b')
 		return;
 	      /* Fall through.  */
@@ -11346,6 +11493,32 @@ mips_ip (char *str, struct mips_cl_insn
 	    case '+':		/* Opcode extension character.  */
 	      switch (*++args)
 		{
+		case '-':		/* This must match exactly twice.  */
+		  {
+		    int op = 0;
+		    while (*s == '-')
+		     {
+			s++;
+			op++;
+		     }
+		    if (op != 2)
+		      insn_error = "Decrement decorator mismatch";
+		  }
+		  continue;
+
+		case '+':		/* Placeholder must match '+' twice.  */
+		  {
+		    int op = 0;
+		    while (*s == '+')
+		    {
+		      s++;
+		      op++;
+		    }
+		    if (op != 2)
+		      insn_error = "Increment decorator mismatch";
+		  }
+		  continue;
+
 		case '1':	/* UDI immediates.  */
 		case '2':
 		case '3':
@@ -11392,6 +11565,250 @@ mips_ip (char *str, struct mips_cl_insn
 		  }
 		  continue;
 
+		case '5': /* R5900 VU floating point register */
+		case '6': /* R5900 VU floating point register */
+		case '7': /* R5900 VU floating point register */
+		case '0': /* R5900 VU integer register */
+		case '8': /* R5900 VU integer register */
+		case '9': /* R5900 VU integer register */
+		  s_reset = s;
+		  if (!file_mips_legacy_vu0)
+		    {
+		      if (*args == '5' || *args == '6' || *args == '7')
+			rtype = RTYPE_VF | RTYPE_NUM;
+		      else
+			rtype = RTYPE_VI | RTYPE_NUM;
+		      if (reg_lookup (&s, rtype, &regno))
+		        goto vu0;
+		    }
+		  else
+		    {
+		      if (*s == '$')
+			++s;
+		      if (*args == '5' || *args == '6' || *args == '7')
+			{
+			  if (!strncmp(s,"vf",2))
+			    s+=2;
+			}
+		      else
+			{
+			  if (!strncmp(s,"vi",2))
+			    s+=2;
+			}
+		      if (ISDIGIT(*s))
+			{
+			  regno = 0;
+			  do
+			    {
+			      regno *= 10;
+			      regno += *s - '0';
+			      ++s;
+			    }
+			  while (ISDIGIT (*s));
+
+			  if (regno > 31)
+			    as_bad (_("Invalid vu0 register `%d'"),regno);
+			  else
+			    goto vu0;
+			}
+		    }
+		  continue;
+
+		case 'd': /* FTF field for R5900 VU floating point register */
+		case 'e': /* FSF field for R5900 VU floating point register */
+		case 'l': /* Optional single character suffix to match opcode */
+		  {
+		    int insn_value = EXTRACT_OPERAND(0,VBC,*ip);
+		    int op_value = 0;
+		    if (*s == ',' || *s == '\0' || ISSPACE(*s))
+		      {
+			if (*args == 'd' || *args == 'e')
+			  insn_error = "No field specified for operand";
+			continue;
+		      }
+		    if (*s == 'x')
+		      op_value = 0;
+		    else if (*s == 'y')
+		      op_value = 1;
+		    else if (*s == 'z')
+		      op_value = 2;
+		    else if (*s == 'w')
+		      op_value = 3;
+		    else
+		      as_bad (_("Invalid character in operand suffix `%c'"),*s);
+		    if (*args == 'd')
+		      INSERT_OPERAND(0,VFTF,*ip,op_value);
+		    if (*args == 'e')
+		      INSERT_OPERAND(0,VFSF,*ip,op_value);
+		    if (*args == 'l')
+		      if (insn_value != op_value)
+			as_bad (_("Mismatched operand field `%c'"),*s);
+		    s++;
+		    while (*s != '\0' && !ISSPACE(*s) && *s != ',')
+		      {
+			insn_error = "Multiple characters in suffix";
+			s++;
+		      }
+		  }
+		  continue;
+
+		case 'f': /* 15 bit immediate in bit 6 for vcallms */
+		  my_getExpression (&imm_expr, s);
+		  check_absolute_expr (ip, &imm_expr);
+		  min_range = 0;
+		  max_range = 0xff8;
+		  if (imm_expr.X_add_number < min_range ||
+		    imm_expr.X_add_number > max_range)
+		    {
+		      as_bad (_("Micromem offset not in range 0x%lx..0x%lx (0x%lx)"),
+			(long) min_range, (long) max_range,
+			(long) imm_expr.X_add_number);
+		    }
+		  if (imm_expr.X_add_number & 0x7)
+		    as_bad (_("Micromem offset is not aligned 0x%lx"),
+		      (long)imm_expr.X_add_number);
+		  /* Not in specs, division is done for simplicity */
+		  INSERT_OPERAND (0, VCALLMS, *ip, (imm_expr.X_add_number >> 3));
+		  imm_expr.X_op = O_absent;
+		  s = expr_end;
+		  continue;
+
+		case 'g': /* 5 bit signed immediate in bit 6 */
+		  my_getExpression (&imm_expr, s);
+		  check_absolute_expr (ip, &imm_expr);
+		  min_range = -((OP_MASK_VIADDI + 1) >> 1);
+		  max_range = ((OP_MASK_VIADDI + 1) >> 1) - 1;
+		  if (imm_expr.X_add_number < min_range ||
+		    imm_expr.X_add_number > max_range)
+		    {
+		      as_bad (_("VU immediate not in range %ld..%ld (%ld)"),
+			(long) min_range, (long) max_range,
+			(long) imm_expr.X_add_number);
+		    }
+		  if (imm_expr.X_add_number < 0)
+		    imm_expr.X_add_number = 32 + imm_expr.X_add_number;
+		  INSERT_OPERAND (0, VIADDI, *ip, imm_expr.X_add_number);
+		  imm_expr.X_op = O_absent;
+		  s = expr_end;
+		  continue;
+
+		case 'h': /* Optional `xyz' opcode suffix */
+		  if (insn_suffix)
+		    if (strncmp("xyz",insn_suffix,3) 
+		      || strlen(insn_suffix) > 3)
+		      as_warn (_("Expected `xyz' opcode destination `%s'"),
+				insn_suffix);
+		  continue;
+
+		case 'i': /* Discarded $I register */
+		case 'q': /* Discarded $Q register */
+		case 'r': /* Discarded $R register */
+		  {
+		    char disreg_name[3] = "$0";
+		    if (*args == 'i')
+		      disreg_name[1] = 'I';
+		    if (*args == 'q')
+		      disreg_name[1] = 'Q';
+		    if (*args == 'r')
+		      disreg_name[1] = 'R';
+		
+		    if (!file_mips_legacy_vu0)
+		      {
+			if (strncmp(disreg_name,s,2)
+			  || (s[2] != '\0' && s[2] != ',' && !ISSPACE(s[2])))
+			  as_bad (_("Expected `%s' register"),disreg_name);
+		      }
+		    else
+		      {
+			if (disreg_name[1] != s[0]
+			  || (s[1] != '\0' && s[1] != ',' && !ISSPACE(s[1])))
+			  as_bad (_("Expected `%c' register"),disreg_name[1]);
+		      }
+		  }
+		  while(*s != '\0' && *s != ',' && !ISSPACE(*s))
+		    s++;
+		  continue;
+
+		case 'j': /* R5900 VU opcode suffix */
+		  if (insn_suffix)
+		    {
+		      char valid[5] = "xyzw";
+		      int fields[4] = { 0, 0, 0, 0 };
+		      unsigned int i;
+		      for (i = 0; i < strlen(insn_suffix); i++)
+			if (insn_suffix[i] == valid[0])
+			  fields[0]++;
+			else if (insn_suffix[i] == valid[1])
+			  fields[1]++;
+			else if (insn_suffix[i] == valid[2])
+			  fields[2]++;
+			else if (insn_suffix[i] == valid[3])
+			  fields[3]++;
+			else
+			  as_bad (_("Invalid character in opcode suffix "
+				    "`%c'"), insn_suffix[i]);
+		      for (i = 0; i < 4; i++)
+			{
+			  if ( fields[i] > 1)
+			    {
+			      as_warn (_("Duplicate field in opcode suffix "
+					"`%c'"), valid[i]);
+			      fields[i] = 1;
+			    }
+			}
+			INSERT_OPERAND(0, VX, *ip, fields[0]);
+			INSERT_OPERAND(0, VY, *ip, fields[1]);
+			INSERT_OPERAND(0, VZ, *ip, fields[2]);
+			INSERT_OPERAND(0, VW, *ip, fields[3]);
+		    }
+		  else
+		    {
+		      /* No suffix implies all fields */
+		      INSERT_OPERAND(0, VX, *ip, 1);
+		      INSERT_OPERAND(0, VY, *ip, 1);
+		      INSERT_OPERAND(0, VZ, *ip, 1);
+		      INSERT_OPERAND(0, VW, *ip, 1);
+		    }
+		  continue;
+
+		case 'k': /* Optional R5900 VU operand suffix */
+		  {
+		    unsigned int length = 0;
+		    s_reset = s;
+		    if (*s == '\0' || ISSPACE(*s) || *s == ',')
+		      continue;
+		    while (*s != '\0' && !ISSPACE(*s) && *s != ',')
+		      {
+			length++;
+			s++;
+		      }
+		    s = s_reset;
+		    if (insn_suffix)
+		      if (strncmp(s,insn_suffix,strlen(insn_suffix))
+			|| length != strlen(insn_suffix))
+			insn_error ="Mismatched operand suffix";
+		    s += length;
+		  }
+		  continue;
+
+		case 'm': /* discarded $ACC register */
+		  /* $ACC may have a (+k) suffix */
+		  if (!file_mips_legacy_vu0)
+		    {
+		      if (!strncmp("$ACC",s,4))
+			s += 4;
+		      else
+			as_bad (_("Expected `$ACC' register"));
+		    }
+		  else
+		    {
+		      if (!strncmp("ACC",s,3))
+			s += 3;
+		      else
+			as_bad (_("Expected `ACC' register"));
+		    }
+		  continue;
+
 		case 'A':		/* ins/ext position, becomes LSB.  */
 		  limlo = 0;
 		  limhi = 31;
@@ -11998,7 +12415,34 @@ mips_ip (char *str, struct mips_cl_insn
 		    cop0 = opcode == OP_OP_COP0;
 		  }
 		types = RTYPE_NUM | (cop0 ? RTYPE_CP0 : RTYPE_GP);
-		ok = reg_lookup (&s, types, &regno);
+		if (!file_mips_legacy_vu0 || mips_opts.arch != CPU_R5900)
+		  ok = reg_lookup (&s, types, &regno);
+		else
+		  {
+		    if (*s == '$')
+		      ++s;
+		    if (!strncmp(s,"vf",2))
+		      s+=2;
+		    else if (!strncmp(s,"vi",2))
+		      s+=2;
+
+		    if (ISDIGIT(*s))
+		      {
+			regno = 0;
+			do
+			  {
+			    regno *= 10;
+			    regno += *s - '0';
+			    ++s;
+			  }
+			while (ISDIGIT (*s));
+
+			if (regno > 31)
+			  ok = 0;
+			else
+			  ok = 1;
+		      }
+		  }
 		if (mips_opts.micromips)
 		  INSERT_OPERAND (1, RS, *ip, regno);
 		else
@@ -12031,7 +12475,34 @@ mips_ip (char *str, struct mips_cl_insn
 	    do_reg:
 	      s_reset = s;
 	      if (*args == 'E' || *args == 'K')
-		ok = reg_lookup (&s, RTYPE_NUM, &regno);
+		{
+		  if (!file_mips_legacy_vu0 || mips_opts.arch != CPU_R5900)
+		    ok = reg_lookup (&s, RTYPE_NUM, &regno);
+		  else
+		    {
+		      if (*s == '$')
+		        ++s;
+		      if (!strncmp(s,"vf",2))
+			s+=2;
+
+		      if (ISDIGIT(*s))
+			{
+			  regno = 0;
+			  do
+			    {
+			      regno *= 10;
+			      regno += *s - '0';
+			      ++s;
+			    }
+			  while (ISDIGIT (*s));
+
+			  if (regno > 31)
+			    ok = 0;
+			  else
+			    ok = 1;
+			}
+		    }
+		}
 	      else
 		{
 		  ok = reg_lookup (&s, RTYPE_NUM | RTYPE_GP, &regno);
@@ -12206,6 +12677,8 @@ mips_ip (char *str, struct mips_cl_insn
 	      s_reset = s;
 	      if (reg_lookup (&s, rtype, &regno))
 		{
+	    /* Jumped from extended (+ 5,6,7,8,9,0) args for R5900 */
+	    vu0:
 		  if ((regno & 1) != 0
 		      && HAVE_32BIT_FPRS
 		      && !mips_oddfpreg_ok (ip->insn_mo, argnum))
@@ -12226,11 +12699,14 @@ mips_ip (char *str, struct mips_cl_insn
 		    }
 		  switch (c)
 		    {
+		    case '5':
+		    case '8':
 		    case 'D':
 		    case 'X':
 		      INSERT_OPERAND (mips_opts.micromips, FD, *ip, regno);
 		      break;
-
+		    case '6':
+		    case '9':
 		    case 'V':
 		    case 'S':
 		    case 'Y':
@@ -12272,6 +12748,8 @@ mips_ip (char *str, struct mips_cl_insn
 						OP_SH_VSEL);
 			}
                       /* Fall through.  */
+		    case '7':
+		    case '0':
 		    case 'W':
 		    case 'T':
 		    case 'Z':
@@ -14602,6 +15080,7 @@ enum options
     OPTION_HARD_FLOAT,
     OPTION_SINGLE_FLOAT,
     OPTION_DOUBLE_FLOAT,
+    OPTION_LEGACY_VU0,
     OPTION_32,
 #ifdef OBJ_ELF
     OPTION_CALL_SHARED,
@@ -14708,6 +15187,7 @@ struct option md_longopts[] =
   {"mhard-float", no_argument, NULL, OPTION_HARD_FLOAT},
   {"msingle-float", no_argument, NULL, OPTION_SINGLE_FLOAT},
   {"mdouble-float", no_argument, NULL, OPTION_DOUBLE_FLOAT},
+  {"mr5900-legacy-vu0", no_argument, NULL, OPTION_LEGACY_VU0},
 
   /* Strictly speaking this next option is ELF specific,
      but we allow it for other ports as well in order to
@@ -15155,6 +15635,9 @@ md_parse_option (int c, char *arg)
       file_mips_soft_float = 0;
       break;
 
+    case OPTION_LEGACY_VU0:
+      file_mips_legacy_vu0 = 1;
+      break;
 #ifdef OBJ_ELF
     case OPTION_MABI:
       if (!IS_ELF)
@@ -19692,7 +20175,8 @@ MIPS options:\n\
 -msoft-float		do not allow floating-point instructions\n\
 -msingle-float		only allow 32-bit floating-point operations\n\
 -mdouble-float		allow 32-bit and 64-bit floating-point operations\n\
---[no-]construct-floats [dis]allow floating point values to be constructed\n"
+--[no-]construct-floats [dis]allow floating point values to be constructed\n\
+-mr5900-legacy-vu0		allow legacy VU0 register names\n"
 		     ));
 #ifdef OBJ_ELF
   fprintf (stream, _("\
diff -Nurp binutils-cvs-20130526/gas/testsuite/gas/mips/mips.exp binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/mips.exp
--- binutils-cvs-20130526/gas/testsuite/gas/mips/mips.exp	2013-05-22 20:08:26.000000000 +0200
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/mips.exp	2013-05-26 12:10:25.624407001 +0200
@@ -1174,6 +1174,8 @@ if { [istarget mips*-*-vxworks*] } {
     run_dump_test "r5900-full"
     if $elf { run_list_test "r5900-nollsc" "-mabi=o64 -march=r5900" }
     run_dump_test "r5900-vu0"
+    run_dump_test "r5900-full-vu0"
+    run_dump_test "r5900-legacy-vu0"
 
     run_list_test_arches "ext-ill"	[mips_arch_list_matching mips64r2]
 }
diff -Nurp binutils-cvs-20130526/gas/testsuite/gas/mips/r5900-full-vu0.d binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/r5900-full-vu0.d
--- binutils-cvs-20130526/gas/testsuite/gas/mips/r5900-full-vu0.d	1970-01-01 01:00:00.000000000 +0100
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/r5900-full-vu0.d	2013-05-26 12:10:25.624407001 +0200
@@ -0,0 +1,194 @@
+#objdump: -dr --prefix-addresses --show-raw-insn -M gpr-names=numeric -mmips:5900
+#name: MIPS R5900 Full VU0
+#as: -march=r5900
+
+.*: +file format .*mips.*
+
+Disassembly of section \.text:
+[0-9a-f]+ <[^>]*> 4be0f9fd 	vabs	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0faa8 	vadd	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa2 	vaddi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0faa0 	vaddq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa83 	vaddw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa80 	vaddx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa81 	vaddy	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa82 	vaddz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fabc 	vadda	\$ACC,\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0fa3e 	vaddai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa3c 	vaddaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f83f 	vaddaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f83c 	vaddax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f83d 	vadday	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f83e 	vaddaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4a000038 	vcallms	0x0000
+[0-9a-f]+ <[^>]*> 4a001a38 	vcallms	0x0340
+[0-9a-f]+ <[^>]*> 4a007ff8 	vcallms	0x0ff8
+[0-9a-f]+ <[^>]*> 4a00d839 	vcallmsr
+[0-9a-f]+ <[^>]*> 4be1f9ff 	vclipw	\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4a2b0bbc 	vdiv	\$Q,\$vf1y,\$vf11x
+[0-9a-f]+ <[^>]*> 4be0f97c 	vftoi0	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f97d 	vftoi4	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f97e 	vftoi12	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f97f 	vftoi15	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4a007870 	viadd	\$vi1,\$vi15,\$vi0
+[0-9a-f]+ <[^>]*> 4a007ff2 	viaddi	\$vi0,\$vi15,-1
+[0-9a-f]+ <[^>]*> 4a007874 	viand	\$vi1,\$vi15,\$vi0
+[0-9a-f]+ <[^>]*> 4a207bfe 	vilwr.w	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4b007bfe 	vilwr.x	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a807bfe 	vilwr.y	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a407bfe 	vilwr.z	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a007875 	vior	\$vi1,\$vi15,\$vi0
+[0-9a-f]+ <[^>]*> 4a207bff 	viswr.w	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4b007bff 	viswr.x	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a807bff 	viswr.y	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a407bff 	viswr.z	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a007871 	visub	\$vi1,\$vi15,\$vi0
+[0-9a-f]+ <[^>]*> 4be0f93c 	vitof0	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f93d 	vitof4	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f93e 	vitof12	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f93f 	vitof15	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be07b7e 	vlqd	\$vf0,\(\-\-\$vi15\)
+[0-9a-f]+ <[^>]*> 4be07b7c 	vlqi	\$vf0,\(\$vi15\+\+\)
+[0-9a-f]+ <[^>]*> 4be0faa9 	vmadd	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa3 	vmaddi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0faa1 	vmaddq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa8b 	vmaddw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa88 	vmaddx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa89 	vmaddy	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa8a 	vmaddz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fabd 	vmadda	\$ACC,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa3f 	vmaddai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa3d 	vmaddaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f8bf 	vmaddaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f8bc 	vmaddax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f8bd 	vmadday	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f8be 	vmaddaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0faab 	vmax	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa9d 	vmaxi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be1fa93 	vmaxw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa90 	vmaxx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa91 	vmaxy	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa92 	vmaxz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be07bfd 	vmfir	\$vf0,\$vi15
+[0-9a-f]+ <[^>]*> 4be0faaf 	vmini	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa9f 	vminii	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be1fa97 	vminiw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa94 	vminix	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa95 	vminiy	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa96 	vminiz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fb3c 	vmove	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0fb3d 	vmr32	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0faad 	vmsub	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa7 	vmsubi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0faa5 	vmsubq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa8f 	vmsubw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa8c 	vmsubx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa8d 	vmsuby	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa8e 	vmsubz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fafd 	vmsuba	\$ACC,\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0fa7f 	vmsubai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa7d 	vmsubaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f8ff 	vmsubaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f8fc 	vmsubax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f8fd 	vmsubay	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f8fe 	vmsubaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4a400bfc 	vmtir	\$vi0,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0faaa 	vmul	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa9e 	vmuli	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa9c 	vmulq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa9b 	vmulw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa98 	vmulx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa99 	vmuly	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa9a 	vmulz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fabe 	vmula	\$ACC,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0f9fe 	vmulai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0f9fc 	vmulaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f9bf 	vmulaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f9bc 	vmulax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f9bd 	vmulay	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f9be 	vmulaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4a0002ff 	vnop
+[0-9a-f]+ <[^>]*> 4bc0fafe 	vopmula	\$ACC,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4bc0faae 	vopmsub	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0043d 	vrget	\$vf0,\$R
+[0-9a-f]+ <[^>]*> 4a600c3e 	vrinit	\$R,\$vf1w
+[0-9a-f]+ <[^>]*> 4be0043c 	vrnext	\$vf0,\$R
+[0-9a-f]+ <[^>]*> 4a6b0bbe 	vrsqrt	\$Q,\$vf1w,\$vf11x
+[0-9a-f]+ <[^>]*> 4a000c3f 	vrxor	\$R,\$vf1x
+[0-9a-f]+ <[^>]*> 4be0fb7f 	vsqd	\$vf31,\(\-\-\$vi0\)
+[0-9a-f]+ <[^>]*> 4be0fb7d 	vsqi	\$vf31,\(\$vi0\+\+\)
+[0-9a-f]+ <[^>]*> 4b2b03bd 	vsqrt	\$Q,\$vf11z
+[0-9a-f]+ <[^>]*> 4be0faac 	vsub	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa6 	vsubi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0faa4 	vsubq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa87 	vsubw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa84 	vsubx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa85 	vsuby	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa86 	vsubz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fafc 	vsuba	\$ACC,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa7e 	vsubai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa7c 	vsubaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f87f 	vsubaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f87c 	vsubax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f87d 	vsubay	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f87e 	vsubaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4a0003bf 	vwaitq
+[0-9a-f]+ <[^>]*> 4be0faa8 	vadd	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4b80faa8 	vadd.xy	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa8 	vadd	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4b807b7c 	vlqi.xy	\$vf0,\(\$vi15\+\+\)
+[0-9a-f]+ <[^>]*> 4be20828 	vadd	\$vf0,\$vf1,\$vf2
+[0-9a-f]+ <[^>]*> 4be520e8 	vadd	\$vf3,\$vf4,\$vf5
+[0-9a-f]+ <[^>]*> 4be839a8 	vadd	\$vf6,\$vf7,\$vf8
+[0-9a-f]+ <[^>]*> 4beb5268 	vadd	\$vf9,\$vf10,\$vf11
+[0-9a-f]+ <[^>]*> 4bee6b28 	vadd	\$vf12,\$vf13,\$vf14
+[0-9a-f]+ <[^>]*> 4bf183e8 	vadd	\$vf15,\$vf16,\$vf17
+[0-9a-f]+ <[^>]*> 4bf49ca8 	vadd	\$vf18,\$vf19,\$vf20
+[0-9a-f]+ <[^>]*> 4bf7b568 	vadd	\$vf21,\$vf22,\$vf23
+[0-9a-f]+ <[^>]*> 4bface28 	vadd	\$vf24,\$vf25,\$vf26
+[0-9a-f]+ <[^>]*> 4bfde6e8 	vadd	\$vf27,\$vf28,\$vf29
+[0-9a-f]+ <[^>]*> 4be0ffa8 	vadd	\$vf30,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4a020830 	viadd	\$vi0,\$vi1,\$vi2
+[0-9a-f]+ <[^>]*> 4a0520f0 	viadd	\$vi3,\$vi4,\$vi5
+[0-9a-f]+ <[^>]*> 4a0839b0 	viadd	\$vi6,\$vi7,\$vi8
+[0-9a-f]+ <[^>]*> 4a0b5270 	viadd	\$vi9,\$vi10,\$vi11
+[0-9a-f]+ <[^>]*> 4a0e6b30 	viadd	\$vi12,\$vi13,\$vi14
+[0-9a-f]+ <[^>]*> 4a1183f0 	viadd	\$vi15,\$vi16,\$vi17
+[0-9a-f]+ <[^>]*> 4a149cb0 	viadd	\$vi18,\$vi19,\$vi20
+[0-9a-f]+ <[^>]*> 4a17b570 	viadd	\$vi21,\$vi22,\$vi23
+[0-9a-f]+ <[^>]*> 4a1ace30 	viadd	\$vi24,\$vi25,\$vi26
+[0-9a-f]+ <[^>]*> 4a1de6f0 	viadd	\$vi27,\$vi28,\$vi29
+[0-9a-f]+ <[^>]*> 4a00ffb0 	viadd	\$vi30,\$vi31,\$vi0
+[0-9a-f]+ <[^>]*> d8000000 	lqc2	\$0,0\(\$0\)
+[0-9a-f]+ <[^>]*> d8217fff 	lqc2	\$1,32767\(\$1\)
+[0-9a-f]+ <[^>]*> d9088000 	lqc2	\$8,-32768\(\$8\)
+[0-9a-f]+ <[^>]*> dbffffff 	lqc2	\$31,-1\(\$31\)
+[0-9a-f]+ <[^>]*> f8000000 	sqc2	\$0,0\(\$0\)
+[0-9a-f]+ <[^>]*> f8217fff 	sqc2	\$1,32767\(\$1\)
+[0-9a-f]+ <[^>]*> f9088000 	sqc2	\$8,-32768\(\$8\)
+[0-9a-f]+ <[^>]*> fbffffff 	sqc2	\$31,-1\(\$31\)
+[0-9a-f]+ <[^>]*> 48400000 	cfc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 4840f800 	cfc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48400001 	cfc2.i	\$0,\$0
+[0-9a-f]+ <[^>]*> 4840f801 	cfc2.i	\$0,\$31
+[0-9a-f]+ <[^>]*> 48400000 	cfc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 4840f800 	cfc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48c00000 	ctc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 48c0f800 	ctc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48c00001 	ctc2.i	\$0,\$0
+[0-9a-f]+ <[^>]*> 48c0f801 	ctc2.i	\$0,\$31
+[0-9a-f]+ <[^>]*> 48c00000 	ctc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 48c0f800 	ctc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48200000 	qmfc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 4820f800 	qmfc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48200001 	qmfc2.i	\$0,\$0
+[0-9a-f]+ <[^>]*> 4820f801 	qmfc2.i	\$0,\$31
+[0-9a-f]+ <[^>]*> 48200000 	qmfc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 4820f800 	qmfc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48a00000 	qmtc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 48a0f800 	qmtc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48a00001 	qmtc2.i	\$0,\$0
+[0-9a-f]+ <[^>]*> 48a0f801 	qmtc2.i	\$0,\$31
+[0-9a-f]+ <[^>]*> 48a00000 	qmtc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 48a0f800 	qmtc2	\$0,\$31
+	\.\.\.
diff -Nurp binutils-cvs-20130526/gas/testsuite/gas/mips/r5900-full-vu0.s binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/r5900-full-vu0.s
--- binutils-cvs-20130526/gas/testsuite/gas/mips/r5900-full-vu0.s	1970-01-01 01:00:00.000000000 +0100
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/r5900-full-vu0.s	2013-05-26 12:10:25.624407001 +0200
@@ -0,0 +1,214 @@
+	.set noreorder
+	.set noat
+
+	.globl text_label .text
+text_label:
+
+	# VU Macromode instruction set
+	vabs.xyzw	$vf0xyzw,$vf31xyzw
+	vadd.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
+	vaddi.xyzw	$vf10xyzw,$vf31xyzw,$I
+	vaddq.xyzw	$vf10xyzw,$vf31xyzw,$Q
+	vaddw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
+	vaddx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
+	vaddy.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
+	vaddz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
+	vadda.xyzw	$ACCxyzw,$vf0xyzw,$vf31xyzw
+	vaddai.xyzw	$ACCxyzw,$vf31xyzw,$I
+	vaddaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
+	vaddaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
+	vaddax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
+	vadday.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
+	vaddaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
+	vcallms	0x0
+	vcallms	0x340
+	vcallms	0xff8
+	vcallmsr	
+	vclipw.xyzw	$vf31xyzw,$vf1w
+	vdiv	$Q,$vf1y,$vf11x
+	vftoi0.xyzw	$vf0xyzw,$vf31xyzw
+	vftoi4.xyzw	$vf0xyzw,$vf31xyzw
+	vftoi12.xyzw	$vf0xyzw,$vf31xyzw
+	vftoi15.xyzw	$vf0xyzw,$vf31xyzw
+	viadd	$vi1,$vi15,$vi0
+	viaddi	$vi0,$vi15,-1
+	viand	$vi1,$vi15,$vi0
+	vilwr.w	$vi0,($vi15)
+	vilwr.x	$vi0,($vi15)
+	vilwr.y	$vi0,($vi15)
+	vilwr.z	$vi0,($vi15)
+	vior	$vi1,$vi15,$vi0
+	viswr.w	$vi0,($vi15)
+	viswr.x	$vi0,($vi15)
+	viswr.y	$vi0,($vi15)
+	viswr.z	$vi0,($vi15)
+	visub	$vi1,$vi15,$vi0
+	vitof0.xyzw	$vf0xyzw,$vf31xyzw
+	vitof4.xyzw	$vf0xyzw,$vf31xyzw
+	vitof12.xyzw	$vf0xyzw,$vf31xyzw
+	vitof15.xyzw	$vf0xyzw,$vf31xyzw
+	vlqd.xyzw	$vf0xyzw,(--$vi15)xyzw
+	vlqi.xyzw	$vf0xyzw,($vi15++)xyzw
+	vmadd.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
+	vmaddi.xyzw	$vf10xyzw,$vf31xyzw,$I
+	vmaddq.xyzw	$vf10xyzw,$vf31xyzw,$Q
+	vmaddw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
+	vmaddx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
+	vmaddy.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
+	vmaddz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
+	vmadda.xyzw	$ACCxyzw,$vf31xyzw,$vf0xyzw
+	vmaddai.xyzw	$ACCxyzw,$vf31xyzw,$I
+	vmaddaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
+	vmaddaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
+	vmaddax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
+	vmadday.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
+	vmaddaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
+	vmax.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
+	vmaxi.xyzw	$vf10xyzw,$vf31xyzw,$I
+	vmaxw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
+	vmaxx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
+	vmaxy.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
+	vmaxz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
+	vmfir.xyzw	$vf0xyzw,$vi15
+	vmini.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
+	vminii.xyzw	$vf10xyzw,$vf31xyzw,$I
+	vminiw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
+	vminix.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
+	vminiy.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
+	vminiz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
+	vmove.xyzw	$vf0xyzw,$vf31xyzw
+	vmr32.xyzw	$vf0xyzw,$vf31xyzw
+	vmsub.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
+	vmsubi.xyzw	$vf10xyzw,$vf31xyzw,$I
+	vmsubq.xyzw	$vf10xyzw,$vf31xyzw,$Q
+	vmsubw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
+	vmsubx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
+	vmsuby.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
+	vmsubz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
+	vmsuba.xyzw	$ACCxyzw,$vf0xyzw,$vf31xyzw
+	vmsubai.xyzw	$ACCxyzw,$vf31xyzw,$I
+	vmsubaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
+	vmsubaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
+	vmsubax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
+	vmsubay.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
+	vmsubaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
+	vmtir	$vi0,$vf1z
+	vmul.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
+	vmuli.xyzw	$vf10xyzw,$vf31xyzw,$I
+	vmulq.xyzw	$vf10xyzw,$vf31xyzw,$Q
+	vmulw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
+	vmulx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
+	vmuly.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
+	vmulz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
+	vmula.xyzw	$ACCxyzw,$vf31xyzw,$vf0xyzw
+	vmulai.xyzw	$ACCxyzw,$vf31xyzw,$I
+	vmulaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
+	vmulaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
+	vmulax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
+	vmulay.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
+	vmulaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
+	vnop	
+	vopmula.xyz	$ACCxyz,$vf31xyz,$vf0xyz
+	vopmsub.xyz	$vf10xyz,$vf31xyz,$vf0xyz
+	vrget.xyzw	$vf0xyzw,$R
+	vrinit	$R,$vf1w
+	vrnext.xyzw	$vf0xyzw,$R
+	vrsqrt	$Q,$vf1w,$vf11x
+	vrxor	$R,$vf1x
+	vsqd.xyzw	$vf31xyzw,(--$vi0)xyzw
+	vsqi.xyzw	$vf31xyzw,($vi0++)xyzw
+	vsqrt	$Q,$vf11z
+	vsub.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
+	vsubi.xyzw	$vf10xyzw,$vf31xyzw,$I
+	vsubq.xyzw	$vf10xyzw,$vf31xyzw,$Q
+	vsubw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
+	vsubx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
+	vsuby.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
+	vsubz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
+	vsuba.xyzw	$ACCxyzw,$vf31xyzw,$vf0xyzw
+	vsubai.xyzw	$ACCxyzw,$vf31xyzw,$I
+	vsubaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
+	vsubaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
+	vsubax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
+	vsubay.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
+	vsubaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
+	vwaitq
+
+	# Implicit suffixes
+	vadd.xyzw	$vf10,$vf31,$vf0
+	vadd.xy	$vf10,$vf31,$vf0
+	vadd	$vf10,$vf31,$vf0
+	vlqi.xy	$vf0,($vi15++)
+
+	# VU floating point registers
+	vadd.xyzw	$vf0,$vf1,$vf2
+	vadd.xyzw	$vf3,$vf4,$vf5
+	vadd.xyzw	$vf6,$vf7,$vf8
+	vadd.xyzw	$vf9,$vf10,$vf11
+	vadd.xyzw	$vf12,$vf13,$vf14
+	vadd.xyzw	$vf15,$vf16,$vf17
+	vadd.xyzw	$vf18,$vf19,$vf20
+	vadd.xyzw	$vf21,$vf22,$vf23
+	vadd.xyzw	$vf24,$vf25,$vf26
+	vadd.xyzw	$vf27,$vf28,$vf29
+	vadd.xyzw	$vf30,$vf31,$vf0
+
+	# VU integer registers
+	viadd	$vi0,$vi1,$vi2
+	viadd	$vi3,$vi4,$vi5
+	viadd	$vi6,$vi7,$vi8
+	viadd	$vi9,$vi10,$vi11
+	viadd	$vi12,$vi13,$vi14
+	viadd	$vi15,$vi16,$vi17
+	viadd	$vi18,$vi19,$vi20
+	viadd	$vi21,$vi22,$vi23
+	viadd	$vi24,$vi25,$vi26
+	viadd	$vi27,$vi28,$vi29
+	viadd	$vi30,$vi31,$vi0
+
+	# Floating point transfer to VU
+	lqc2	$0,0($0)
+	lqc2	$1, 0x7fff($1)
+	lqc2	$8, -0x8000($8)
+	lqc2	$31, -1($31)
+
+	# Floating point transfer from VU
+	sqc2	$0,0($0)
+	sqc2	$1, 0x7fff($1)
+	sqc2	$8, -0x8000($8)
+	sqc2	$31, -1($31)
+
+	# Integer transfer from VU
+	cfc2	$0,$0
+	cfc2	$0,$31
+	cfc2.i	$0,$0
+	cfc2.i	$0,$31
+	cfc2.ni	$0,$0
+	cfc2.ni	$0,$31
+
+	# Integer transfer to VU
+	ctc2	$0,$0
+	ctc2	$0,$31
+	ctc2.i	$0,$0
+	ctc2.i	$0,$31
+	ctc2.ni	$0,$0
+	ctc2.ni	$0,$31
+
+	# Floating point transfer from VU
+	qmfc2	$0,$0
+	qmfc2	$0,$31
+	qmfc2.i	$0,$0
+	qmfc2.i	$0,$31
+	qmfc2.ni	$0,$0
+	qmfc2.ni	$0,$31
+
+	# Floating point transfer to VU
+	qmtc2	$0,$0
+	qmtc2	$0,$31
+	qmtc2.i	$0,$0
+	qmtc2.i	$0,$31
+	qmtc2.ni	$0,$0
+	qmtc2.ni	$0,$31
+
+# Force at least 8 (non-delay-slot) zero bytes, to make 'objdump' print ...
+      .space  8
diff -Nurp binutils-cvs-20130526/gas/testsuite/gas/mips/r5900-legacy-vu0.d binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/r5900-legacy-vu0.d
--- binutils-cvs-20130526/gas/testsuite/gas/mips/r5900-legacy-vu0.d	1970-01-01 01:00:00.000000000 +0100
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/r5900-legacy-vu0.d	2013-05-26 12:10:25.624407001 +0200
@@ -0,0 +1,194 @@
+#objdump: -dr --prefix-addresses --show-raw-insn -M gpr-names=numeric -mmips:5900
+#name: MIPS R5900 Legacy VU0
+#as: -march=r5900 -mr5900-legacy-vu0
+
+.*: +file format .*mips.*
+
+Disassembly of section \.text:
+[0-9a-f]+ <[^>]*> 4be0f9fd 	vabs	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0faa8 	vadd	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa2 	vaddi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0faa0 	vaddq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa83 	vaddw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa80 	vaddx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa81 	vaddy	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa82 	vaddz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fabc 	vadda	\$ACC,\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0fa3e 	vaddai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa3c 	vaddaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f83f 	vaddaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f83c 	vaddax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f83d 	vadday	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f83e 	vaddaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4a000038 	vcallms	0x0000
+[0-9a-f]+ <[^>]*> 4a001a38 	vcallms	0x0340
+[0-9a-f]+ <[^>]*> 4a007ff8 	vcallms	0x0ff8
+[0-9a-f]+ <[^>]*> 4a00d839 	vcallmsr
+[0-9a-f]+ <[^>]*> 4be1f9ff 	vclipw	\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4a2b0bbc 	vdiv	\$Q,\$vf1y,\$vf11x
+[0-9a-f]+ <[^>]*> 4be0f97c 	vftoi0	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f97d 	vftoi4	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f97e 	vftoi12	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f97f 	vftoi15	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4a007870 	viadd	\$vi1,\$vi15,\$vi0
+[0-9a-f]+ <[^>]*> 4a007ff2 	viaddi	\$vi0,\$vi15,-1
+[0-9a-f]+ <[^>]*> 4a007874 	viand	\$vi1,\$vi15,\$vi0
+[0-9a-f]+ <[^>]*> 4a207bfe 	vilwr.w	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4b007bfe 	vilwr.x	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a807bfe 	vilwr.y	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a407bfe 	vilwr.z	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a007875 	vior	\$vi1,\$vi15,\$vi0
+[0-9a-f]+ <[^>]*> 4a207bff 	viswr.w	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4b007bff 	viswr.x	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a807bff 	viswr.y	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a407bff 	viswr.z	\$vi0,\(\$vi15\)
+[0-9a-f]+ <[^>]*> 4a007871 	visub	\$vi1,\$vi15,\$vi0
+[0-9a-f]+ <[^>]*> 4be0f93c 	vitof0	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f93d 	vitof4	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f93e 	vitof12	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0f93f 	vitof15	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be07b7e 	vlqd	\$vf0,\(\-\-\$vi15\)
+[0-9a-f]+ <[^>]*> 4be07b7c 	vlqi	\$vf0,\(\$vi15\+\+\)
+[0-9a-f]+ <[^>]*> 4be0faa9 	vmadd	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa3 	vmaddi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0faa1 	vmaddq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa8b 	vmaddw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa88 	vmaddx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa89 	vmaddy	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa8a 	vmaddz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fabd 	vmadda	\$ACC,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa3f 	vmaddai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa3d 	vmaddaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f8bf 	vmaddaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f8bc 	vmaddax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f8bd 	vmadday	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f8be 	vmaddaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0faab 	vmax	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa9d 	vmaxi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be1fa93 	vmaxw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa90 	vmaxx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa91 	vmaxy	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa92 	vmaxz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be07bfd 	vmfir	\$vf0,\$vi15
+[0-9a-f]+ <[^>]*> 4be0faaf 	vmini	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa9f 	vminii	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be1fa97 	vminiw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa94 	vminix	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa95 	vminiy	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa96 	vminiz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fb3c 	vmove	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0fb3d 	vmr32	\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0faad 	vmsub	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa7 	vmsubi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0faa5 	vmsubq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa8f 	vmsubw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa8c 	vmsubx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa8d 	vmsuby	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa8e 	vmsubz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fafd 	vmsuba	\$ACC,\$vf0,\$vf31
+[0-9a-f]+ <[^>]*> 4be0fa7f 	vmsubai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa7d 	vmsubaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f8ff 	vmsubaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f8fc 	vmsubax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f8fd 	vmsubay	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f8fe 	vmsubaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4a400bfc 	vmtir	\$vi0,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0faaa 	vmul	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa9e 	vmuli	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa9c 	vmulq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa9b 	vmulw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa98 	vmulx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa99 	vmuly	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa9a 	vmulz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fabe 	vmula	\$ACC,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0f9fe 	vmulai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0f9fc 	vmulaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f9bf 	vmulaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f9bc 	vmulax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f9bd 	vmulay	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f9be 	vmulaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4a0002ff 	vnop
+[0-9a-f]+ <[^>]*> 4bc0fafe 	vopmula	\$ACC,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4bc0faae 	vopmsub	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0043d 	vrget	\$vf0,\$R
+[0-9a-f]+ <[^>]*> 4a600c3e 	vrinit	\$R,\$vf1w
+[0-9a-f]+ <[^>]*> 4be0043c 	vrnext	\$vf0,\$R
+[0-9a-f]+ <[^>]*> 4a6b0bbe 	vrsqrt	\$Q,\$vf1w,\$vf11x
+[0-9a-f]+ <[^>]*> 4a000c3f 	vrxor	\$R,\$vf1x
+[0-9a-f]+ <[^>]*> 4be0fb7f 	vsqd	\$vf31,\(\-\-\$vi0\)
+[0-9a-f]+ <[^>]*> 4be0fb7d 	vsqi	\$vf31,\(\$vi0\+\+\)
+[0-9a-f]+ <[^>]*> 4b2b03bd 	vsqrt	\$Q,\$vf11z
+[0-9a-f]+ <[^>]*> 4be0faac 	vsub	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa6 	vsubi	\$vf10,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0faa4 	vsubq	\$vf10,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1fa87 	vsubw	\$vf10,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1fa84 	vsubx	\$vf10,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1fa85 	vsuby	\$vf10,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1fa86 	vsubz	\$vf10,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4be0fafc 	vsuba	\$ACC,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0fa7e 	vsubai	\$ACC,\$vf31,\$I
+[0-9a-f]+ <[^>]*> 4be0fa7c 	vsubaq	\$ACC,\$vf31,\$Q
+[0-9a-f]+ <[^>]*> 4be1f87f 	vsubaw	\$ACC,\$vf31,\$vf1w
+[0-9a-f]+ <[^>]*> 4be1f87c 	vsubax	\$ACC,\$vf31,\$vf1x
+[0-9a-f]+ <[^>]*> 4be1f87d 	vsubay	\$ACC,\$vf31,\$vf1y
+[0-9a-f]+ <[^>]*> 4be1f87e 	vsubaz	\$ACC,\$vf31,\$vf1z
+[0-9a-f]+ <[^>]*> 4a0003bf 	vwaitq
+[0-9a-f]+ <[^>]*> 4be0faa8 	vadd	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4b80faa8 	vadd.xy	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4be0faa8 	vadd	\$vf10,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4b807b7c 	vlqi.xy	\$vf0,\(\$vi15\+\+\)
+[0-9a-f]+ <[^>]*> 4be20828 	vadd	\$vf0,\$vf1,\$vf2
+[0-9a-f]+ <[^>]*> 4be520e8 	vadd	\$vf3,\$vf4,\$vf5
+[0-9a-f]+ <[^>]*> 4be839a8 	vadd	\$vf6,\$vf7,\$vf8
+[0-9a-f]+ <[^>]*> 4beb5268 	vadd	\$vf9,\$vf10,\$vf11
+[0-9a-f]+ <[^>]*> 4bee6b28 	vadd	\$vf12,\$vf13,\$vf14
+[0-9a-f]+ <[^>]*> 4bf183e8 	vadd	\$vf15,\$vf16,\$vf17
+[0-9a-f]+ <[^>]*> 4bf49ca8 	vadd	\$vf18,\$vf19,\$vf20
+[0-9a-f]+ <[^>]*> 4bf7b568 	vadd	\$vf21,\$vf22,\$vf23
+[0-9a-f]+ <[^>]*> 4bface28 	vadd	\$vf24,\$vf25,\$vf26
+[0-9a-f]+ <[^>]*> 4bfde6e8 	vadd	\$vf27,\$vf28,\$vf29
+[0-9a-f]+ <[^>]*> 4be0ffa8 	vadd	\$vf30,\$vf31,\$vf0
+[0-9a-f]+ <[^>]*> 4a020830 	viadd	\$vi0,\$vi1,\$vi2
+[0-9a-f]+ <[^>]*> 4a0520f0 	viadd	\$vi3,\$vi4,\$vi5
+[0-9a-f]+ <[^>]*> 4a0839b0 	viadd	\$vi6,\$vi7,\$vi8
+[0-9a-f]+ <[^>]*> 4a0b5270 	viadd	\$vi9,\$vi10,\$vi11
+[0-9a-f]+ <[^>]*> 4a0e6b30 	viadd	\$vi12,\$vi13,\$vi14
+[0-9a-f]+ <[^>]*> 4a1183f0 	viadd	\$vi15,\$vi16,\$vi17
+[0-9a-f]+ <[^>]*> 4a149cb0 	viadd	\$vi18,\$vi19,\$vi20
+[0-9a-f]+ <[^>]*> 4a17b570 	viadd	\$vi21,\$vi22,\$vi23
+[0-9a-f]+ <[^>]*> 4a1ace30 	viadd	\$vi24,\$vi25,\$vi26
+[0-9a-f]+ <[^>]*> 4a1de6f0 	viadd	\$vi27,\$vi28,\$vi29
+[0-9a-f]+ <[^>]*> 4a00ffb0 	viadd	\$vi30,\$vi31,\$vi0
+[0-9a-f]+ <[^>]*> d8000000 	lqc2	\$0,0\(\$0\)
+[0-9a-f]+ <[^>]*> d8217fff 	lqc2	\$1,32767\(\$1\)
+[0-9a-f]+ <[^>]*> d9088000 	lqc2	\$8,-32768\(\$8\)
+[0-9a-f]+ <[^>]*> dbffffff 	lqc2	\$31,-1\(\$31\)
+[0-9a-f]+ <[^>]*> f8000000 	sqc2	\$0,0\(\$0\)
+[0-9a-f]+ <[^>]*> f8217fff 	sqc2	\$1,32767\(\$1\)
+[0-9a-f]+ <[^>]*> f9088000 	sqc2	\$8,-32768\(\$8\)
+[0-9a-f]+ <[^>]*> fbffffff 	sqc2	\$31,-1\(\$31\)
+[0-9a-f]+ <[^>]*> 48400000 	cfc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 4840f800 	cfc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48400001 	cfc2.i	\$0,\$0
+[0-9a-f]+ <[^>]*> 4840f801 	cfc2.i	\$0,\$31
+[0-9a-f]+ <[^>]*> 48400000 	cfc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 4840f800 	cfc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48c00000 	ctc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 48c0f800 	ctc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48c00001 	ctc2.i	\$0,\$0
+[0-9a-f]+ <[^>]*> 48c0f801 	ctc2.i	\$0,\$31
+[0-9a-f]+ <[^>]*> 48c00000 	ctc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 48c0f800 	ctc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48200000 	qmfc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 4820f800 	qmfc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48200001 	qmfc2.i	\$0,\$0
+[0-9a-f]+ <[^>]*> 4820f801 	qmfc2.i	\$0,\$31
+[0-9a-f]+ <[^>]*> 48200000 	qmfc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 4820f800 	qmfc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48a00000 	qmtc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 48a0f800 	qmtc2	\$0,\$31
+[0-9a-f]+ <[^>]*> 48a00001 	qmtc2.i	\$0,\$0
+[0-9a-f]+ <[^>]*> 48a0f801 	qmtc2.i	\$0,\$31
+[0-9a-f]+ <[^>]*> 48a00000 	qmtc2	\$0,\$0
+[0-9a-f]+ <[^>]*> 48a0f800 	qmtc2	\$0,\$31
+	\.\.\.
diff -Nurp binutils-cvs-20130526/gas/testsuite/gas/mips/r5900-legacy-vu0.s binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/r5900-legacy-vu0.s
--- binutils-cvs-20130526/gas/testsuite/gas/mips/r5900-legacy-vu0.s	1970-01-01 01:00:00.000000000 +0100
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/gas/testsuite/gas/mips/r5900-legacy-vu0.s	2013-05-26 12:10:25.624407001 +0200
@@ -0,0 +1,214 @@
+	.set noreorder
+	.set noat
+
+	.globl text_label .text
+text_label:
+
+	# VU Macromode instruction set
+	vabs.xyzw	vf0xyzw,vf31xyzw
+	vadd.xyzw	vf10xyzw,vf31xyzw,vf0xyzw
+	vaddi.xyzw	vf10xyzw,vf31xyzw,I
+	vaddq.xyzw	vf10xyzw,vf31xyzw,Q
+	vaddw.xyzw	vf10xyzw,vf31xyzw,vf1w
+	vaddx.xyzw	vf10xyzw,vf31xyzw,vf1x
+	vaddy.xyzw	vf10xyzw,vf31xyzw,vf1y
+	vaddz.xyzw	vf10xyzw,vf31xyzw,vf1z
+	vadda.xyzw	ACCxyzw,vf0xyzw,vf31xyzw
+	vaddai.xyzw	ACCxyzw,vf31xyzw,I
+	vaddaq.xyzw	ACCxyzw,vf31xyzw,Q
+	vaddaw.xyzw	ACCxyzw,vf31xyzw,vf1w
+	vaddax.xyzw	ACCxyzw,vf31xyzw,vf1x
+	vadday.xyzw	ACCxyzw,vf31xyzw,vf1y
+	vaddaz.xyzw	ACCxyzw,vf31xyzw,vf1z
+	vcallms	0x0
+	vcallms	0x340
+	vcallms	0xff8
+	vcallmsr	
+	vclipw.xyzw	vf31xyzw,vf1w
+	vdiv	Q,vf1y,vf11x
+	vftoi0.xyzw	vf0xyzw,vf31xyzw
+	vftoi4.xyzw	vf0xyzw,vf31xyzw
+	vftoi12.xyzw	vf0xyzw,vf31xyzw
+	vftoi15.xyzw	vf0xyzw,vf31xyzw
+	viadd	vi1,vi15,vi0
+	viaddi	vi0,vi15,-1
+	viand	vi1,vi15,vi0
+	vilwr.w	vi0,(vi15)
+	vilwr.x	vi0,(vi15)
+	vilwr.y	vi0,(vi15)
+	vilwr.z	vi0,(vi15)
+	vior	vi1,vi15,vi0
+	viswr.w	vi0,(vi15)
+	viswr.x	vi0,(vi15)
+	viswr.y	vi0,(vi15)
+	viswr.z	vi0,(vi15)
+	visub	vi1,vi15,vi0
+	vitof0.xyzw	vf0xyzw,vf31xyzw
+	vitof4.xyzw	vf0xyzw,vf31xyzw
+	vitof12.xyzw	vf0xyzw,vf31xyzw
+	vitof15.xyzw	vf0xyzw,vf31xyzw
+	vlqd.xyzw	vf0xyzw,(--vi15)xyzw
+	vlqi.xyzw	vf0xyzw,(vi15++)xyzw
+	vmadd.xyzw	vf10xyzw,vf31xyzw,vf0xyzw
+	vmaddi.xyzw	vf10xyzw,vf31xyzw,I
+	vmaddq.xyzw	vf10xyzw,vf31xyzw,Q
+	vmaddw.xyzw	vf10xyzw,vf31xyzw,vf1w
+	vmaddx.xyzw	vf10xyzw,vf31xyzw,vf1x
+	vmaddy.xyzw	vf10xyzw,vf31xyzw,vf1y
+	vmaddz.xyzw	vf10xyzw,vf31xyzw,vf1z
+	vmadda.xyzw	ACCxyzw,vf31xyzw,vf0xyzw
+	vmaddai.xyzw	ACCxyzw,vf31xyzw,I
+	vmaddaq.xyzw	ACCxyzw,vf31xyzw,Q
+	vmaddaw.xyzw	ACCxyzw,vf31xyzw,vf1w
+	vmaddax.xyzw	ACCxyzw,vf31xyzw,vf1x
+	vmadday.xyzw	ACCxyzw,vf31xyzw,vf1y
+	vmaddaz.xyzw	ACCxyzw,vf31xyzw,vf1z
+	vmax.xyzw	vf10xyzw,vf31xyzw,vf0xyzw
+	vmaxi.xyzw	vf10xyzw,vf31xyzw,I
+	vmaxw.xyzw	vf10xyzw,vf31xyzw,vf1w
+	vmaxx.xyzw	vf10xyzw,vf31xyzw,vf1x
+	vmaxy.xyzw	vf10xyzw,vf31xyzw,vf1y
+	vmaxz.xyzw	vf10xyzw,vf31xyzw,vf1z
+	vmfir.xyzw	vf0xyzw,vi15
+	vmini.xyzw	vf10xyzw,vf31xyzw,vf0xyzw
+	vminii.xyzw	vf10xyzw,vf31xyzw,I
+	vminiw.xyzw	vf10xyzw,vf31xyzw,vf1w
+	vminix.xyzw	vf10xyzw,vf31xyzw,vf1x
+	vminiy.xyzw	vf10xyzw,vf31xyzw,vf1y
+	vminiz.xyzw	vf10xyzw,vf31xyzw,vf1z
+	vmove.xyzw	vf0xyzw,vf31xyzw
+	vmr32.xyzw	vf0xyzw,vf31xyzw
+	vmsub.xyzw	vf10xyzw,vf31xyzw,vf0xyzw
+	vmsubi.xyzw	vf10xyzw,vf31xyzw,I
+	vmsubq.xyzw	vf10xyzw,vf31xyzw,Q
+	vmsubw.xyzw	vf10xyzw,vf31xyzw,vf1w
+	vmsubx.xyzw	vf10xyzw,vf31xyzw,vf1x
+	vmsuby.xyzw	vf10xyzw,vf31xyzw,vf1y
+	vmsubz.xyzw	vf10xyzw,vf31xyzw,vf1z
+	vmsuba.xyzw	ACCxyzw,vf0xyzw,vf31xyzw
+	vmsubai.xyzw	ACCxyzw,vf31xyzw,I
+	vmsubaq.xyzw	ACCxyzw,vf31xyzw,Q
+	vmsubaw.xyzw	ACCxyzw,vf31xyzw,vf1w
+	vmsubax.xyzw	ACCxyzw,vf31xyzw,vf1x
+	vmsubay.xyzw	ACCxyzw,vf31xyzw,vf1y
+	vmsubaz.xyzw	ACCxyzw,vf31xyzw,vf1z
+	vmtir	vi0,vf1z
+	vmul.xyzw	vf10xyzw,vf31xyzw,vf0xyzw
+	vmuli.xyzw	vf10xyzw,vf31xyzw,I
+	vmulq.xyzw	vf10xyzw,vf31xyzw,Q
+	vmulw.xyzw	vf10xyzw,vf31xyzw,vf1w
+	vmulx.xyzw	vf10xyzw,vf31xyzw,vf1x
+	vmuly.xyzw	vf10xyzw,vf31xyzw,vf1y
+	vmulz.xyzw	vf10xyzw,vf31xyzw,vf1z
+	vmula.xyzw	ACCxyzw,vf31xyzw,vf0xyzw
+	vmulai.xyzw	ACCxyzw,vf31xyzw,I
+	vmulaq.xyzw	ACCxyzw,vf31xyzw,Q
+	vmulaw.xyzw	ACCxyzw,vf31xyzw,vf1w
+	vmulax.xyzw	ACCxyzw,vf31xyzw,vf1x
+	vmulay.xyzw	ACCxyzw,vf31xyzw,vf1y
+	vmulaz.xyzw	ACCxyzw,vf31xyzw,vf1z
+	vnop	
+	vopmula.xyz	ACCxyz,vf31xyz,vf0xyz
+	vopmsub.xyz	vf10xyz,vf31xyz,vf0xyz
+	vrget.xyzw	vf0xyzw,R
+	vrinit	R,vf1w
+	vrnext.xyzw	vf0xyzw,R
+	vrsqrt	Q,vf1w,vf11x
+	vrxor	R,vf1x
+	vsqd.xyzw	vf31xyzw,(--vi0)xyzw
+	vsqi.xyzw	vf31xyzw,(vi0++)xyzw
+	vsqrt	Q,vf11z
+	vsub.xyzw	vf10xyzw,vf31xyzw,vf0xyzw
+	vsubi.xyzw	vf10xyzw,vf31xyzw,I
+	vsubq.xyzw	vf10xyzw,vf31xyzw,Q
+	vsubw.xyzw	vf10xyzw,vf31xyzw,vf1w
+	vsubx.xyzw	vf10xyzw,vf31xyzw,vf1x
+	vsuby.xyzw	vf10xyzw,vf31xyzw,vf1y
+	vsubz.xyzw	vf10xyzw,vf31xyzw,vf1z
+	vsuba.xyzw	ACCxyzw,vf31xyzw,vf0xyzw
+	vsubai.xyzw	ACCxyzw,vf31xyzw,I
+	vsubaq.xyzw	ACCxyzw,vf31xyzw,Q
+	vsubaw.xyzw	ACCxyzw,vf31xyzw,vf1w
+	vsubax.xyzw	ACCxyzw,vf31xyzw,vf1x
+	vsubay.xyzw	ACCxyzw,vf31xyzw,vf1y
+	vsubaz.xyzw	ACCxyzw,vf31xyzw,vf1z
+	vwaitq
+
+	# Implicit suffixes
+	vadd.xyzw	vf10,vf31,vf0
+	vadd.xy	vf10,vf31,vf0
+	vadd	vf10,vf31,vf0
+	vlqi.xy	vf0,(vi15++)
+
+	# VU floating point registers
+	vadd.xyzw	vf0,vf1,vf2
+	vadd.xyzw	vf3,vf4,vf5
+	vadd.xyzw	vf6,vf7,vf8
+	vadd.xyzw	vf9,vf10,vf11
+	vadd.xyzw	vf12,vf13,vf14
+	vadd.xyzw	vf15,vf16,vf17
+	vadd.xyzw	vf18,vf19,vf20
+	vadd.xyzw	vf21,vf22,vf23
+	vadd.xyzw	vf24,vf25,vf26
+	vadd.xyzw	vf27,vf28,vf29
+	vadd.xyzw	vf30,vf31,vf0
+
+	# VU integer registers
+	viadd	vi0,vi1,vi2
+	viadd	vi3,vi4,vi5
+	viadd	vi6,vi7,vi8
+	viadd	vi9,vi10,vi11
+	viadd	vi12,vi13,vi14
+	viadd	vi15,vi16,vi17
+	viadd	vi18,vi19,vi20
+	viadd	vi21,vi22,vi23
+	viadd	vi24,vi25,vi26
+	viadd	vi27,vi28,vi29
+	viadd	vi30,vi31,vi0
+
+	# Floating point transfer to VU
+	lqc2	vf0,0($0)
+	lqc2	vf1, 0x7fff($1)
+	lqc2	$vf8, -0x8000($8)
+	lqc2	$vf31, -1($31)
+
+	# Floating point transfer from VU
+	sqc2	vf0,0($0)
+	sqc2	vf1, 0x7fff($1)
+	sqc2	$vf8, -0x8000($8)
+	sqc2	$vf31, -1($31)
+
+	# Integer transfer from VU
+	cfc2	$0,vi0
+	cfc2	$0,vi31
+	cfc2.i	$0,$vi0
+	cfc2.i	$0,$vi31
+	cfc2.ni	$0,vi0
+	cfc2.ni	$0,vi31
+
+	# Integer transfer to VU
+	ctc2	$0,vi0
+	ctc2	$0,vi31
+	ctc2.i	$0,$vi0
+	ctc2.i	$0,$vi31
+	ctc2.ni	$0,vi0
+	ctc2.ni	$0,vi31
+
+	# Floating point transfer from VU
+	qmfc2	$0,vf0
+	qmfc2	$0,vf31
+	qmfc2.i	$0,$vf0
+	qmfc2.i	$0,$vf31
+	qmfc2.ni	$0,vf0
+	qmfc2.ni	$0,vf31
+
+	# Floating point transfer to VU
+	qmtc2	$0,vf0
+	qmtc2	$0,vf31
+	qmtc2.i	$0,$vf0
+	qmtc2.i	$0,$vf31
+	qmtc2.ni	$0,vf0
+	qmtc2.ni	$0,vf31
+
+# Force at least 8 (non-delay-slot) zero bytes, to make 'objdump' print ...
+      .space  8
diff -Nurp binutils-cvs-20130526/include/opcode/mips.h binutils-cvs-20130526-mips64r5900el-linux-patched/include/opcode/mips.h
--- binutils-cvs-20130526/include/opcode/mips.h	2013-05-22 20:08:25.000000000 +0200
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/include/opcode/mips.h	2013-05-26 12:10:25.628407001 +0200
@@ -155,6 +155,28 @@
 #define OP_MASK_EXTMSBD		0x1f	/* "ext" MSBD.  */
 #define OP_SH_EXTMSBD		11
 
+/* r5900's VU0 Macromode */
+#define OP_MASK_VCALLMS		0x7fff
+#define OP_SH_VCALLMS		6
+#define OP_MASK_VIADDI		0x1f
+#define OP_SH_VIADDI		6
+#define OP_MASK_VFSF		0x3
+#define OP_SH_VFSF		21
+#define OP_MASK_VFTF		0x3
+#define OP_SH_VFTF		23
+#define OP_MASK_VFIELD		0xf
+#define OP_SH_VFIELD		21
+#define OP_MASK_VBC		0x3
+#define OP_SH_VBC		0
+#define OP_MASK_VX		0x1
+#define OP_SH_VX		24
+#define OP_MASK_VY		0x1
+#define OP_SH_VY		23
+#define OP_MASK_VZ		0x1
+#define OP_SH_VZ		22
+#define OP_MASK_VW		0x1
+#define OP_SH_VW		21
+
 /* MIPS DSP ASE */
 #define OP_SH_DSPACC		11
 #define OP_MASK_DSPACC  	0x3
@@ -461,6 +483,26 @@ struct mips_opcode
    "Y"	MDMX source register (OP_*_FS)
    "Z"	MDMX source register (OP_*_FT)
 
+   R5900 VU Macromode instructions:
+   "+5" 5 bit floating point register (OP_*_FD)
+   "+6" 5 bit floating point register (OP_*_FS)
+   "+7" 5 bit floating point register (OP_*_FT)
+   "+8" 5 bit integer register (OP_*_FD)
+   "+9" 5 bit integer register (OP_*_FS)
+   "+0" 5 bit integer register (OP_*_FT)
+   "+d" 2 bit FTF field suffix (OP_*_VFTF)
+   "+e" 2 bit FSF field suffix (OP_*_VFSF)
+   "+f" 15 bit immediate for vcallms (OP_*_VCALLMS)
+   "+g" 5 bit signed immediate for viaddi (OP_*_VIADDI)
+   "+h" insn suffix, must be "xyz" if present
+   "+i" discarded $I register
+   "+j" insn suffix, comprised of "xyzw" (OP_*_VFIELD)
+   "+k" operand suffix that must match opcode suffix
+   "+l" operand suffix field that matches value (OP_*_VBC)
+   "+m" discarded $ACC register
+   "+q" discarded $Q register
+   "+r" discarded $R register
+
    DSP ASE usage:
    "2" 2 bit unsigned immediate for byte align (OP_*_BP)
    "3" 3 bit unsigned immediate (OP_*_SA3)
@@ -523,6 +565,8 @@ struct mips_opcode
    ","  separates operands
    "[]" brackets around index for vector-op scalar operand specifier (vr5400)
    "+"  Start of extension sequence.
+   "++" increment (++) decorator
+   "+-" decrement (--) decorator
 
    Characters used so far, for quick reference when adding more:
    "1234567890"
@@ -532,9 +576,10 @@ struct mips_opcode
 
    Extension character sequences used so far ("+" followed by the
    following), for quick reference when adding more:
-   "1234"
+   "1234567890+-"
    "ABCDEFGHIJPQSTXZ"
    "abcpstxz"
+   "abcdefghijklmpqrstxz"
 */
 
 /* These are the bits which may be set in the pinfo field of an
@@ -1637,6 +1682,26 @@ extern const int bfd_mips16_num_opcodes;
 #define MICROMIPSOP_MASK_RZ		0
 #define MICROMIPSOP_SH_FZ		0
 #define MICROMIPSOP_MASK_FZ		0
+#define MICROMIPSOP_SH_VCALLMS		0
+#define MICROMIPSOP_MASK_VCALLMS	0
+#define MICROMIPSOP_SH_VIADDI		0
+#define MICROMIPSOP_MASK_VIADDI		0
+#define MICROMIPSOP_SH_VFSF		0
+#define MICROMIPSOP_MASK_VFSF		0
+#define MICROMIPSOP_SH_VFTF		0
+#define MICROMIPSOP_MASK_VFTF		0
+#define MICROMIPSOP_SH_VFIELD		0
+#define MICROMIPSOP_MASK_VFIELD		0
+#define MICROMIPSOP_MASK_VBC		0
+#define MICROMIPSOP_SH_VBC		0
+#define MICROMIPSOP_MASK_VX		0
+#define MICROMIPSOP_SH_VX		0
+#define MICROMIPSOP_MASK_VY		0
+#define MICROMIPSOP_SH_VY		0
+#define MICROMIPSOP_MASK_VZ		0
+#define MICROMIPSOP_SH_VZ		0
+#define MICROMIPSOP_MASK_VW		0
+#define MICROMIPSOP_SH_VW		0
 
 /* These are the characters which may appears in the args field of a microMIPS
    instruction.  They appear in the order in which the fields appear
diff -Nurp binutils-cvs-20130526/opcodes/mips-dis.c binutils-cvs-20130526-mips64r5900el-linux-patched/opcodes/mips-dis.c
--- binutils-cvs-20130526/opcodes/mips-dis.c	2013-05-10 03:08:48.000000000 +0200
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/opcodes/mips-dis.c	2013-05-26 12:10:25.628407001 +0200
@@ -1005,6 +1005,14 @@ print_insn_args (const char *d,
 			   "incomplete extension sequence (+)"));
 	      return;
 
+	  case '-': /* Placeholder for '--' decrement decorator */
+	    infprintf (is, "--");
+	    break;
+
+	  case '+': /* Placeholder for '++' increment decorator */
+	    infprintf (is, "++");
+	    break;
+
 	    case 'A':
 	      lsb = GET_OP (l, SHAMT);
 	      infprintf (is, "0x%x", lsb);
@@ -1031,6 +1039,31 @@ print_insn_args (const char *d,
 	      infprintf (is, "0x%x", GET_OP (l, UDI4));
 	      break;
 	      
+
+	    case '5':
+	      infprintf (is, "$vf%d", GET_OP (l, FD));
+	      break;
+
+	    case '6':
+	      infprintf (is, "$vf%d", GET_OP (l, FS));
+	      break;
+
+	    case '7':
+	      infprintf (is, "$vf%d", GET_OP (l, FT));
+	      break;
+
+	    case '8':
+	      infprintf (is, "$vi%d", GET_OP (l, FD));
+	      break;
+
+	    case '9':
+	      infprintf (is, "$vi%d", GET_OP (l, FS));
+	      break;
+
+	    case '0':
+	      infprintf (is, "$vi%d", GET_OP (l, FT));
+	      break;
+
 	    case 'C':
 	    case 'H':
 	      msbd = GET_OP (l, EXTMSBD);
@@ -1137,6 +1170,79 @@ print_insn_args (const char *d,
 	      infprintf (is, "%d", GET_OP_S (l, OFFSET_C) << 4);
 	      break;
 
+	    case 'd': /* FTF field for r5900 VU floating point register */
+	    case 'e': /* FSF field for r5900 VU floating point register */
+	    case 'l': /* BC field for r5900 VU instructions */
+	      {
+		unsigned int field = 0;
+
+		if (*d == 'd')
+		  field = GET_OP (l, VFTF);
+		if (*d == 'e')
+		  field = GET_OP (l, VFSF);
+		if (*d == 'l')
+		  field = GET_OP (l, VBC);
+
+		if (field == 0)
+		  infprintf (is, "x");
+		if (field == 1)
+		  infprintf (is, "y");
+		if (field == 2)
+		  infprintf (is, "z");
+		if (field == 3)
+		  infprintf (is, "w");
+	      }
+	      break;
+
+	    case 'f': /* 15 bit immediate in bit 6 */
+	      infprintf (is, "0x%04x", GET_OP (l, VCALLMS) << 3);
+	      break;
+
+	    case 'g': /* 5 bit signed immediate in bit 6 */
+	      infprintf (is, "%d", (GET_OP (l, VIADDI) ^ 0x10) - 16);
+	      break;
+
+	    case 'h': /* Optional "xyz" insn suffix */
+	      break;
+
+	    case 'i': /* Discarded $I register */
+	      infprintf (is, "$I");
+	      break;
+
+	    case 'j': /* r5900 VU opcode suffix */
+	      {
+		unsigned int field = GET_OP (l, VFIELD);
+		if (field < 0xf)
+		{
+		  infprintf (is, ".");
+		  if (GET_OP (l, VX))
+		    infprintf (is, "x");
+		  if (GET_OP (l, VY))
+		    infprintf (is, "y");
+		  if (GET_OP (l, VZ))
+		    infprintf (is, "z");
+		  if (GET_OP (l, VW))
+		    infprintf (is, "w");
+		}
+		infprintf (is, "\t");
+	      }
+	      break;
+
+	    case 'k': /* Optional r5600 VU operand suffix */
+	      break;
+
+	    case 'm': /* Discarded $ACC register */
+	      infprintf (is, "$ACC");
+	      break;
+
+	    case 'q': /* Discarded $Q register */
+	      infprintf (is, "$Q");
+	      break;
+
+	    case 'r': /* Discarded $R register */
+	      infprintf (is,"$R");
+	      break;
+
 	    case 'z':
 	      infprintf (is, "%s", mips_gpr_names[GET_OP (l, RZ)]);
 	      break;
@@ -1546,7 +1652,8 @@ print_insn_mips (bfd_vma memaddr,
 	      d = op->args;
 	      if (d != NULL && *d != '\0')
 		{
-		  infprintf (is, "\t");
+		  if (strncmp("+j",d,2))
+		    infprintf (is, "\t");
 		  print_insn_args (d, word, memaddr, info, op);
 		}
 
diff -Nurp binutils-cvs-20130526/opcodes/mips-opc.c binutils-cvs-20130526-mips64r5900el-linux-patched/opcodes/mips-opc.c
--- binutils-cvs-20130526/opcodes/mips-opc.c	2013-05-22 20:08:25.000000000 +0200
+++ binutils-cvs-20130526-mips64r5900el-linux-patched/opcodes/mips-opc.c	2013-05-26 12:10:25.628407001 +0200
@@ -151,6 +151,9 @@
 /* 64 bit CPU with only 32 bit multiplication/division support. */
 #define M32	EE
 
+/* Support for VU0 Coprocessor instructions */
+#define VU0	EE
+
 /* MIPS DSP ASE support.
    NOTE:
    1. MIPS DSP ASE includes 4 accumulators ($ac0 - $ac3).  $ac0 is the pair
@@ -288,6 +291,134 @@ const struct mips_opcode mips_builtin_op
 {"gslqc1",	"+Z,T,+c(b)",	0xc8008020,	0xfc008020,	WR_T|RD_b|LDD,	WR_Z,	IL3A	},
 {"gssqc1",	"+Z,T,+c(b)",	0xe8008020,	0xfc008020,	RD_T|RD_b|SM,	RD_Z,	IL3A	},
 
+/* R5900 VU Macromode instructions. */
+{"vabs",	"+j+7+k,+6+k",		0x4a0001fd,	0xfe0007ff,	CP,	0,	VU0	},
+{"vadd",	"+j+5+k,+6+k,+7+k",	0x4a000028,	0xfe00003f,	CP,	0,	VU0	},
+{"vaddi",	"+j+5+k,+6+k,+i",	0x4a000022,	0xfe1f003f,	CP,	0,	VU0	},
+{"vaddq",	"+j+5+k,+6+k,+q",	0x4a000020,	0xfe1f003f,	CP,	0,	VU0	},
+{"vaddw",	"+j+5+k,+6+k,+7+l",	0x4a000003,	0xfe00003f,	CP,	0,	VU0	},
+{"vaddx",	"+j+5+k,+6+k,+7+l",	0x4a000000,	0xfe00003f,	CP,	0,	VU0	},
+{"vaddy",	"+j+5+k,+6+k,+7+l",	0x4a000001,	0xfe00003f,	CP,	0,	VU0	},
+{"vaddz",	"+j+5+k,+6+k,+7+l",	0x4a000002,	0xfe00003f,	CP,	0,	VU0	},
+{"vadda",	"+j+m+k,+7+k,+6+k",	0x4a0002bc,	0xfe0007ff,	CP,	0,	VU0	},
+{"vaddai",	"+j+m+k,+6+k,+i",	0x4a00023e,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vaddaq",	"+j+m+k,+6+k,+q",	0x4a00023c,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vaddaw",	"+j+m+k,+6+k,+7+l",	0x4a00003f,	0xfe0007ff,	CP,	0,	VU0	},
+{"vaddax",	"+j+m+k,+6+k,+7+l",	0x4a00003c,	0xfe0007ff,	CP,	0,	VU0	},
+{"vadday",	"+j+m+k,+6+k,+7+l",	0x4a00003d,	0xfe0007ff,	CP,	0,	VU0	},
+{"vaddaz",	"+j+m+k,+6+k,+7+l",	0x4a00003e,	0xfe0007ff,	CP,	0,	VU0	},
+{"vcallms",	"+f",			0x4a000038,	0xffe0003f,	CP,	0,	VU0	},
+{"vcallmsr"	,"",			0x4a00d839,	0xffffffff,	CP,	0,	VU0	},
+{"vclipw",	"+j+6+k,+7+l",		0x4a0001ff,	0xfe0007ff,	CP,	0,	VU0	},
+{"vdiv",	"+q,+6+e,+7+d",		0x4a0003bc,	0xfe0007ff,	CP,	0,	VU0	},
+{"vftoi0",	"+j+7+k,+6+k",		0x4a00017c,	0xfe0007ff,	CP,	0,	VU0	},
+{"vftoi4",	"+j+7+k,+6+k",		0x4a00017d,	0xfe0007ff,	CP,	0,	VU0	},
+{"vftoi12",	"+j+7+k,+6+k",		0x4a00017e,	0xfe0007ff,	CP,	0,	VU0	},
+{"vftoi15",	"+j+7+k,+6+k",		0x4a00017f,	0xfe0007ff,	CP,	0,	VU0	},
+{"viadd",	"+8,+9,+0",		0x4a000030,	0xffe0003f,	CP,	0,	VU0	},
+{"viaddi",	"+0,+9,+g",		0x4a000032,	0xffe0003f,	CP,	0,	VU0	},
+{"viand",	"+8,+9,+0",		0x4a000034,	0xffe0003f,	CP,	0,	VU0	},
+{"vilwr.w",	"+0,(+9)",		0x4a2003fe,	0xffe007ff,	CP,	0,	VU0	},
+{"vilwr.x",	"+0,(+9)",		0x4b0003fe,	0xffe007ff,	CP,	0,	VU0	},
+{"vilwr.y",	"+0,(+9)",		0x4a8003fe,	0xffe007ff,	CP,	0,	VU0	},
+{"vilwr.z",	"+0,(+9)",		0x4a4003fe,	0xffe007ff,	CP,	0,	VU0	},
+{"vior",	"+8,+9,+0",		0x4a000035,	0xffe0003f,	CP,	0,	VU0	},
+{"viswr.w",	"+0,(+9)",		0x4a2003ff,	0xffe007ff,	CP,	0,	VU0	},
+{"viswr.x",	"+0,(+9)",		0x4b0003ff,	0xffe007ff,	CP,	0,	VU0	},
+{"viswr.y",	"+0,(+9)",		0x4a8003ff,	0xffe007ff,	CP,	0,	VU0	},
+{"viswr.z",	"+0,(+9)",		0x4a4003ff,	0xffe007ff,	CP,	0,	VU0	},
+{"visub",	"+8,+9,+0",		0x4a000031,	0xffe0003f,	CP,	0,	VU0	},
+{"vitof0",	"+j+7+k,+6+k",		0x4a00013c,	0xfe0007ff,	CP,	0,	VU0	},
+{"vitof4",	"+j+7+k,+6+k",		0x4a00013d,	0xfe0007ff,	CP,	0,	VU0	},
+{"vitof12",	"+j+7+k,+6+k",		0x4a00013e,	0xfe0007ff,	CP,	0,	VU0	},
+{"vitof15",	"+j+7+k,+6+k",		0x4a00013f,	0xfe0007ff,	CP,	0,	VU0	},
+{"vlqd",	"+j+7+k,(+-+9)+k",	0x4a00037e,	0xfe0007ff,	CP,	0,	VU0	},
+{"vlqi",	"+j+7+k,(+9++)+k",	0x4a00037c,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmadd",	"+j+5+k,+6+k,+7+k",	0x4a000029,	0xfe00003f,	CP,	0,	VU0	},
+{"vmaddi",	"+j+5+k,+6+k,+i",	0x4a000023,	0xfe1f003f,	CP,	0,	VU0	},
+{"vmaddq",	"+j+5+k,+6+k,+q",	0x4a000021,	0xfe1f003f,	CP,	0,	VU0	},
+{"vmaddw",	"+j+5+k,+6+k,+7+l",	0x4a00000b,	0xfe00003f,	CP,	0,	VU0	},
+{"vmaddx",	"+j+5+k,+6+k,+7+l",	0x4a000008,	0xfe00003f,	CP,	0,	VU0	},
+{"vmaddy",	"+j+5+k,+6+k,+7+l",	0x4a000009,	0xfe00003f,	CP,	0,	VU0	},
+{"vmaddz",	"+j+5+k,+6+k,+7+l",	0x4a00000a,	0xfe00003f,	CP,	0,	VU0	},
+{"vmadda",	"+j+m+k,+6+k,+7+k",	0x4a0002bd,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmaddai",	"+j+m+k,+6+k,+i",	0x4a00023f,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vmaddaq",	"+j+m+k,+6+k,+q",	0x4a00023d,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vmaddaw",	"+j+m+k,+6+k,+7+l",	0x4a0000bf,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmaddax",	"+j+m+k,+6+k,+7+l",	0x4a0000bc,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmadday",	"+j+m+k,+6+k,+7+l",	0x4a0000bd,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmaddaz",	"+j+m+k,+6+k,+7+l",	0x4a0000be,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmax",	"+j+5+k,+6+k,+7+k",	0x4a00002b,	0xfe00003f,	CP,	0,	VU0	},
+{"vmaxi",	"+j+5+k,+6+k,+i",	0x4a00001d,	0xfe1f003f,	CP,	0,	VU0	},
+{"vmaxw",	"+j+5+k,+6+k,+7+l",	0x4a000013,	0xfe00003f,	CP,	0,	VU0	},
+{"vmaxx",	"+j+5+k,+6+k,+7+l",	0x4a000010,	0xfe00003f,	CP,	0,	VU0	},
+{"vmaxy",	"+j+5+k,+6+k,+7+l",	0x4a000011,	0xfe00003f,	CP,	0,	VU0	},
+{"vmaxz",	"+j+5+k,+6+k,+7+l",	0x4a000012,	0xfe00003f,	CP,	0,	VU0	},
+{"vmfir",	"+j+7+k,+9",		0x4a0003fd,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmini",	"+j+5+k,+6+k,+7+k",	0x4a00002f,	0xfe00003f,	CP,	0,	VU0	},
+{"vminii",	"+j+5+k,+6+k,+i",	0x4a00001f,	0xfe1f003f,	CP,	0,	VU0	},
+{"vminiw",	"+j+5+k,+6+k,+7+l",	0x4a000017,	0xfe00003f,	CP,	0,	VU0	},
+{"vminix",	"+j+5+k,+6+k,+7+l",	0x4a000014,	0xfe00003f,	CP,	0,	VU0	},
+{"vminiy",	"+j+5+k,+6+k,+7+l",	0x4a000015,	0xfe00003f,	CP,	0,	VU0	},
+{"vminiz",	"+j+5+k,+6+k,+7+l",	0x4a000016,	0xfe00003f,	CP,	0,	VU0	},
+{"vmove",	"+j+7+k,+6+k",		0x4a00033c,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmr32",	"+j+7+k,+6+k",		0x4a00033d,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmsub",	"+j+5+k,+6+k,+7+k",	0x4a00002d,	0xfe00003f,	CP,	0,	VU0	},
+{"vmsubi",	"+j+5+k,+6+k,+i",	0x4a000027,	0xfe1f003f,	CP,	0,	VU0	},
+{"vmsubq",	"+j+5+k,+6+k,+q",	0x4a000025,	0xfe1f003f,	CP,	0,	VU0	},
+{"vmsubw",	"+j+5+k,+6+k,+7+l",	0x4a00000f,	0xfe00003f,	CP,	0,	VU0	},
+{"vmsubx",	"+j+5+k,+6+k,+7+l",	0x4a00000c,	0xfe00003f,	CP,	0,	VU0	},
+{"vmsuby",	"+j+5+k,+6+k,+7+l",	0x4a00000d,	0xfe00003f,	CP,	0,	VU0	},
+{"vmsubz",	"+j+5+k,+6+k,+7+l",	0x4a00000e,	0xfe00003f,	CP,	0,	VU0	},
+{"vmsuba",	"+j+m+k,+7+k,+6+k",	0x4a0002fd,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmsubai",	"+j+m+k,+6+k,+i",	0x4a00027f,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vmsubaq",	"+j+m+k,+6+k,+q",	0x4a00027d,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vmsubaw",	"+j+m+k,+6+k,+7+l",	0x4a0000ff,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmsubax",	"+j+m+k,+6+k,+7+l",	0x4a0000fc,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmsubay",	"+j+m+k,+6+k,+7+l",	0x4a0000fd,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmsubaz",	"+j+m+k,+6+k,+7+l",	0x4a0000fe,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmtir",	"+0,+6+e",		0x4a0003fc,	0xff8007ff,	CP,	0,	VU0	},
+{"vmul",	"+j+5+k,+6+k,+7+k",	0x4a00002a,	0xfe00003f,	CP,	0,	VU0	},
+{"vmuli",	"+j+5+k,+6+k,+i",	0x4a00001e,	0xfe1f003f,	CP,	0,	VU0	},
+{"vmulq",	"+j+5+k,+6+k,+q",	0x4a00001c,	0xfe1f003f,	CP,	0,	VU0	},
+{"vmulw",	"+j+5+k,+6+k,+7+l",	0x4a00001b,	0xfe00003f,	CP,	0,	VU0	},
+{"vmulx",	"+j+5+k,+6+k,+7+l",	0x4a000018,	0xfe00003f,	CP,	0,	VU0	},
+{"vmuly",	"+j+5+k,+6+k,+7+l",	0x4a000019,	0xfe00003f,	CP,	0,	VU0	},
+{"vmulz",	"+j+5+k,+6+k,+7+l",	0x4a00001a,	0xfe00003f,	CP,	0,	VU0	},
+{"vmula",	"+j+m+k,+6+k,+7+k",	0x4a0002be,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmulai",	"+j+m+k,+6+k,+i",	0x4a0001fe,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vmulaq",	"+j+m+k,+6+k,+q",	0x4a0001fc,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vmulaw",	"+j+m+k,+6+k,+7+l",	0x4a0001bf,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmulax",	"+j+m+k,+6+k,+7+l",	0x4a0001bc,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmulay",	"+j+m+k,+6+k,+7+l",	0x4a0001bd,	0xfe0007ff,	CP,	0,	VU0	},
+{"vmulaz",	"+j+m+k,+6+k,+7+l",	0x4a0001be,	0xfe0007ff,	CP,	0,	VU0	},
+{"vnop",	"",			0x4a0002ff,	0xffffffff,	CP,	0,	VU0	},
+{"vopmula",	"+h+m+k,+6+k,+7+k",	0x4bc002fe,	0xffe007ff,	CP,	0,	VU0	},
+{"vopmsub",	"+h+5+k,+6+k,+7+k",	0x4bc0002e,	0xffe0003f,	CP,	0,	VU0	},
+{"vrget",	"+j+7+k,+r",		0x4a00043d,	0xfe00ffff,	CP,	0,	VU0	},
+{"vrinit",	"+r,+6+e",		0x4a00043e,	0xff9f07ff,	CP,	0,	VU0	},
+{"vrnext",	"+j+7+k,+r",		0x4a00043c,	0xfe00ffff,	CP,	0,	VU0	},
+{"vrsqrt",	"+q,+6+e,+7+d",		0x4a0003be,	0xfe0007ff,	CP,	0,	VU0	},
+{"vrxor",	"+r,+6+e",		0x4a00043f,	0xff9f07ff,	CP,	0,	VU0	},
+{"vsqd",	"+j+6+k,(+-+0)+k",	0x4a00037f,	0xfe0007ff,	CP,	0,	VU0	},
+{"vsqi",	"+j+6+k,(+0++)+k",	0x4a00037d,	0xfe0007ff,	CP,	0,	VU0	},
+{"vsqrt",	"+q,+7+d",		0x4a2003bd,	0xfe60ffff,	CP,	0,	VU0	},
+{"vsub",	"+j+5+k,+6+k,+7+k",	0x4a00002c,	0xfe00003f,	CP,	0,	VU0	},
+{"vsubi",	"+j+5+k,+6+k,+i",	0x4a000026,	0xfe1f003f,	CP,	0,	VU0	},
+{"vsubq",	"+j+5+k,+6+k,+q",	0x4a000024,	0xfe1f003f,	CP,	0,	VU0	},
+{"vsubw",	"+j+5+k,+6+k,+7+l",	0x4a000007,	0xfe00003f,	CP,	0,	VU0	},
+{"vsubx",	"+j+5+k,+6+k,+7+l",	0x4a000004,	0xfe00003f,	CP,	0,	VU0	},
+{"vsuby",	"+j+5+k,+6+k,+7+l",	0x4a000005,	0xfe00003f,	CP,	0,	VU0	},
+{"vsubz",	"+j+5+k,+6+k,+7+l",	0x4a000006,	0xfe00003f,	CP,	0,	VU0	},
+{"vsuba",	"+j+m+k,+6+k,+7+k",	0x4a0002fc,	0xfe0007ff,	CP,	0,	VU0	},
+{"vsubai",	"+j+m+k,+6+k,+i",	0x4a00027e,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vsubaq",	"+j+m+k,+6+k,+q",	0x4a00027c,	0xfe1f07ff,	CP,	0,	VU0	},
+{"vsubaw",	"+j+m+k,+6+k,+7+l",	0x4a00007f,	0xfe0007ff,	CP,	0,	VU0	},
+{"vsubax",	"+j+m+k,+6+k,+7+l",	0x4a00007c,	0xfe0007ff,	CP,	0,	VU0	},
+{"vsubay",	"+j+m+k,+6+k,+7+l",	0x4a00007d,	0xfe0007ff,	CP,	0,	VU0	},
+{"vsubaz",	"+j+m+k,+6+k,+7+l",	0x4a00007e,	0xfe0007ff,	CP,	0,	VU0	},
+{"vwaitq",	"",			0x4a0003bf,	0xffffffff,	CP,	0,	VU0	},
+
 {"abs",     "d,v",	0,    (int) M_ABS,	INSN_MACRO,		0,		I1	},
 {"abs.s",   "D,V",	0x46000005, 0xffff003f,	WR_D|RD_S|FP_S,		0,		I1	},
 {"abs.d",   "D,V",	0x46200005, 0xffff003f,	WR_D|RD_S|FP_D,		0,		I1,	SF	},
